// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/cmdmsgs.tmpl (3.843kB)
// templates/cmdusages.tmpl (2.343kB)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesCmdmsgsTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\xcd\x6e\xeb\x36\x13\xdd\xeb\x29\xe6\xf3\xb7\x48\x6b\x24\x7e\x00\xa1\x28\xe0\xa4\x29\x7a\x81\x3a\xbd\x48\x6e\x5a\x74\x27\x5a\x1c\xdb\x53\x50\xa4\x4a\x52\xb1\x03\x82\x7d\xf6\x82\xd4\x8f\xa5\xd8\x52\x9c\x14\xd9\x38\xe4\x21\xe7\xcc\x99\x99\x43\x39\xc7\x71\x43\x12\x61\xb6\x67\x42\xa0\x5d\x31\x92\x16\x25\x93\x39\xce\xe0\xc6\xfb\xc4\xb9\x85\xf7\xf0\x47\xdc\x84\xe2\xb8\x9b\x38\x77\x03\x28\xb9\xf7\x49\xd2\xbb\x84\xec\x8e\x6b\xb6\x5f\x91\x5c\x16\xaa\x92\xf6\x5e\xeb\xee\x9e\x67\x83\x7a\x85\xd2\x92\x92\xde\x43\x0b\x85\x82\x24\x15\x55\x01\x2c\x1e\x00\x32\x90\x39\xb7\x58\x51\x00\x39\xb7\x78\x7a\x2d\xd6\x4a\x78\x9f\x4d\x47\xfc\x9d\x09\xe2\xcc\xe2\x92\x73\x3d\x1e\x34\xdc\x1c\x10\xde\x67\x21\x90\x54\xb6\x1f\xe2\xca\x00\xe3\x5c\xa3\x31\xd3\xb1\x6e\x95\xfd\x50\x18\x92\xb0\x56\xf6\xca\x40\xad\xf1\x35\xbc\xaa\x0a\x72\x26\xa1\x32\x18\xb1\x5f\x35\x6e\xe8\xe0\x7d\x49\x98\x41\xae\x8a\x82\x49\x0e\x56\xc1\x96\x5e\x10\x8c\x2a\x50\x49\xec\x13\x9d\xa6\x57\x2b\xff\xa0\xec\xbd\x54\xd5\x76\x37\x4e\x33\xd0\xe0\x4a\x5e\x59\xd8\xb1\x17\x04\x94\xaa\xb2\xbb\xb6\x0e\x56\x75\x25\x4a\xb2\x2c\xbb\x65\x22\x94\xbd\xd9\x4d\x43\x82\xf1\xd7\xb0\x48\xc9\xb3\xcc\x95\xdc\x90\x2e\x90\xf7\xa0\xbd\xd5\x73\xa7\xb2\xec\x9d\xe2\x3e\x55\x79\x8e\xc6\x4c\xa4\xd1\x75\xd3\x08\xb1\x90\x4e\xaf\x2a\x89\x3d\x6c\x10\xd3\x80\xf8\x76\xf8\x19\xf1\x4d\x16\x71\xf9\xfe\x50\x3e\x6b\xe1\x7d\xfc\xe7\xcb\x4f\x63\xaa\xaf\x99\xa8\x03\x8e\xb0\xfb\x53\x55\x1a\xd6\xb5\x7a\x69\x50\xf2\xae\x95\x22\x1d\x23\xdb\x57\x31\x82\x3e\xab\x1f\xc7\x52\x19\xb2\x5f\xe4\x46\x4d\xb1\x1b\x8e\x40\x73\xa8\x1d\x05\x20\x93\x26\x7d\xe9\xce\x46\x2a\x09\x6b\x66\x2b\x92\xe3\x0d\xb7\x1a\x8e\xfa\xf9\x39\x07\x26\x84\xda\x63\x1c\x80\x35\x02\x27\x63\x35\xad\x2b\x3b\x62\x39\x25\x61\xd7\xea\xef\x79\xce\x99\x86\xdf\xf6\x1b\xbe\x17\xab\x14\xc8\x0c\xc6\x09\x6d\x07\xb2\x3f\xa9\x8d\x48\x59\x9c\x52\xb4\x6f\x45\x3b\x33\x31\x97\x14\xbb\x8f\xfd\x6c\xcd\xa3\x1e\x5f\x51\x95\x02\xfb\x42\x78\x0f\x0f\x0a\xca\xb8\x7e\xa2\x2c\x94\x84\xd7\xf0\x4d\xbf\x02\xdb\x32\x92\xb0\xdf\xa1\x6c\xb1\x4c\x23\x28\x29\x48\x5e\xa0\xff\x3d\xcb\x27\xec\x26\xb0\x47\x79\x36\x9b\xd6\x8c\x9b\x8a\x0c\x4a\x11\x70\x8f\x98\x23\xbd\xa0\xbe\x6b\x8e\xd6\xdc\x46\x6c\xba\x24\x0c\x71\x22\xf6\x17\x9a\x1a\xcc\x90\xf7\x94\x63\x7c\x26\x72\xdf\xaa\x52\xa1\x84\xa0\x52\x95\x29\xfc\xf3\xe6\xcf\xb9\xc5\x9d\x22\xf9\xc0\x8a\x60\x3e\x81\xc7\x1b\x44\x9a\x33\xc9\x5f\xd3\xa4\xa3\x17\xc4\x3d\xa1\xe8\x9c\x66\x72\x8b\xd0\xf1\x34\x35\x24\xd8\x56\xa4\xe7\x1c\x6d\x60\xf1\xb4\x53\xfb\xa5\x10\x75\x5b\x78\x0f\xdf\x31\x21\x26\xb2\xfb\xbe\x39\x7c\x3e\xcb\x7c\xc7\xa4\x44\xf1\x5b\x89\x9a\x59\xa5\x27\xcc\xb9\x59\xa2\x0d\xe0\xdf\xb0\x68\x0f\xc0\x8c\x71\xde\xc2\x67\x30\xf3\x7e\xc9\x39\x72\x30\xf5\x45\x9b\x4a\x88\xd7\x3a\xb2\x30\xd8\x87\x3d\x62\xa1\xc2\x83\x78\x82\x8b\x0c\xb3\xfe\x74\x5c\x99\x76\x6c\x43\x63\xed\x81\xe5\x36\xbc\xa5\x24\xc1\xee\x30\xcc\x74\x9d\x83\x49\xe3\x05\x8d\x86\x77\xcd\x22\x78\x0f\x3f\xfc\x3f\xaa\xf8\xa3\x73\x81\x85\xf7\xc1\x95\xba\x53\x93\xf2\x94\x84\xe1\x2b\x6a\xc5\x24\xdb\xa2\xfe\x95\x4c\xd3\x80\xf3\xf9\xbc\x59\x4b\xe7\xf3\x79\x02\x30\x9f\x07\xa9\xd2\xf8\x1b\xe0\x06\x9c\xfb\x4b\x91\x84\x45\x83\x32\x30\xbb\x0e\x59\x47\xe4\xa3\x12\x38\x8a\x0c\x9b\x1d\xfa\x02\x4e\x13\xef\x41\xd0\xca\xa0\x7e\x41\x0d\x45\x43\x36\x71\xce\x62\x51\x0a\x66\x47\x92\x5b\xbc\x13\x75\x22\xdc\x53\x1d\x2a\x3e\x89\xdb\x61\x2d\x14\xc9\x7a\xd9\xd4\xda\xf5\xaa\xdb\xca\x57\x9b\x71\x3a\x9f\x43\xcf\x99\xe3\xce\xb2\x2e\x77\x57\xe5\x08\x09\x83\xd0\x96\x38\x0c\x46\xad\x61\x57\xf4\xd8\x62\x6d\xb9\x97\xc7\x6a\x9f\x16\xfb\x32\x41\x4e\x30\xf7\x87\x5c\x54\x1c\x2f\x13\xad\x4e\x67\xdc\x4c\xcb\xb8\x1f\xdf\xa4\x5b\x65\xdb\xe4\xe3\xe7\xa6\xc6\x58\x41\x0e\x1b\xa5\x43\xbb\x87\x8f\xcf\x0b\x62\xd5\xea\x06\x2f\x3f\x90\x99\x78\x44\x7b\x0f\xa8\xdd\x51\x98\x33\x92\x57\x06\x4c\x3c\x0e\xd9\xfb\x9f\xec\xc3\x0c\xa7\x83\xb5\x6f\x6f\x2f\xdd\x63\xae\xf1\x81\xdc\x56\x9a\x45\xaf\xb1\x2a\x26\x3b\x20\x00\x1b\x46\x02\xf9\xff\x92\xe1\xc1\x1d\x33\xb0\x46\x94\xdd\x0d\x8d\x58\x1f\x25\x3f\xfd\x5d\xfa\x5f\xb9\x8f\xf8\xdc\x29\x99\xd0\x51\x13\x43\xd6\x25\xc9\xd6\x02\x87\xe5\x4a\x93\x9b\xa3\x9b\xd4\x91\x2f\x32\x92\x41\x2b\x37\xe6\xd6\xac\x41\x74\xa3\xc6\xe2\x8e\x97\x37\xbb\x17\x5b\x55\x83\xbf\xcc\xaa\xb0\x09\xad\x63\xe8\x0f\xce\xde\xbf\x01\x00\x00\xff\xff\x8d\x53\x57\x96\x03\x0f\x00\x00")

func templatesCmdmsgsTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesCmdmsgsTmpl,
		"templates/cmdmsgs.tmpl",
	)
}

func templatesCmdmsgsTmpl() (*asset, error) {
	bytes, err := templatesCmdmsgsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/cmdmsgs.tmpl", size: 3843, mode: os.FileMode(420), modTime: time.Unix(1539178413, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3a, 0x7d, 0x1f, 0x79, 0xf6, 0xb2, 0xaf, 0xcd, 0x1, 0xea, 0xc5, 0xc5, 0x9, 0x10, 0x6b, 0xaa, 0x13, 0xf5, 0xb7, 0xd9, 0xcf, 0xf8, 0x88, 0x59, 0x8a, 0x31, 0xe7, 0x45, 0xc0, 0x7c, 0xd4, 0xcb}}
	return a, nil
}

var _templatesCmdusagesTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\xdb\x6a\x1b\x31\x10\x7d\xf7\x57\x0c\x2e\x21\x60\x88\x3e\x20\x18\x13\x52\x5a\x12\xa8\x4b\x20\x0d\xa5\xa4\x05\xcb\xbb\xb3\xb6\x40\x97\x45\xd2\xda\x0e\xca\xfe\x7b\xd1\x4a\x6b\xef\x35\xee\x83\xfb\xb6\x68\x66\xce\xcc\x99\xcb\x59\xe7\x52\xcc\x98\x44\x98\x0a\xca\xe4\xb4\x2c\x9d\x43\x99\x96\xe5\xe4\x64\x28\x0c\xdd\xe0\x14\x6e\xaa\x47\xf2\x62\x50\x2f\x51\x5a\xa6\x64\x59\x82\x73\xe4\xb3\x48\xbf\x53\x81\x65\x09\x89\x12\x82\xca\x14\xaa\x80\x5b\xe7\xa6\xbf\x3d\xe0\xc4\xb9\x1b\x08\x98\x0d\xd0\x9c\xe1\x4b\x13\x97\x65\x40\x1e\xcd\xf3\x56\xed\xab\xe7\x07\x26\xad\xaf\xc5\xa2\xc8\x39\xb5\xa7\x2a\x08\xc4\x12\xab\xb8\xd9\x6c\xe6\x1c\x79\xd2\x98\xb1\x43\x59\xe6\x0c\xe1\xf5\x4e\x63\x82\x6c\x87\x9a\x10\xf2\x07\xe6\x54\xa8\x42\xda\xc5\x6c\x36\x9b\x00\x78\x07\xe7\xc8\xf3\x9b\x58\x2b\x5e\x96\x60\x15\xd4\xde\x66\x02\x20\x98\x64\xa2\x10\x10\x62\x6e\x3d\x32\xc3\x25\x8b\x3c\xeb\xa8\x61\x3e\x6b\xca\x1b\x7c\xda\x75\xad\x29\x0f\xf9\x37\x68\x61\x4d\x39\x95\x09\xc6\x24\xc3\x60\x29\xe6\xca\x30\x3b\x0a\x18\xed\x27\xd0\xf8\x00\x34\x4d\x35\x1a\x33\x8c\xba\x67\x76\x9b\x6a\xba\xbf\x78\xdf\x6b\x60\x98\xc7\xfc\x8b\x4e\xdf\xfb\x8d\xfd\x19\x43\xfa\xdd\x05\xb0\x87\x0c\xfd\xfa\xe4\x9a\x49\x9b\xc1\xf4\x6a\x73\x75\x35\x05\xf2\xe3\xf0\x15\xf1\x09\x75\x82\xbe\x44\x50\xd9\x31\x09\x28\x7d\x4c\xe1\x5c\x70\xfc\xc7\xb1\x25\x5b\x2a\x25\xf2\x8b\xb7\x24\xe2\x56\x1d\x79\xd7\x28\xd4\x0e\x17\x30\xff\x14\x9f\x09\x21\xb1\x33\x34\x4d\x7d\xf5\xc1\x03\x68\x62\xd9\x0e\xa1\x0e\xce\x94\x86\x55\x83\xc2\x0a\x56\xa6\x3e\xb2\x91\x19\x6f\x91\xe7\x2f\x1f\xdc\xeb\x9b\x2a\x20\xa1\x12\x0a\x83\x60\xb7\x68\xf0\x88\xd7\xcf\x36\x69\x72\x3e\xdd\x2b\xa9\x70\x4f\x96\xd3\xe6\x77\x2d\xed\x35\xee\x5a\x3b\xeb\xe8\xbb\x59\x71\x0a\xed\x5f\x52\x49\x37\xa8\x7d\x87\x83\x8c\x34\x43\xdb\x53\x23\x4d\xd1\x1a\x96\x9a\x25\x65\x32\x22\x5e\x64\xd4\xce\x91\x7b\x65\x9b\xba\x23\x02\x7a\x67\xe0\x77\x85\x41\xfd\x7e\xa7\x15\xc7\xc5\xc0\xbc\xeb\x20\xdf\xfa\x27\x86\xf7\x6a\x44\x0f\x22\x83\x90\xef\x3f\x11\xc8\xab\x6f\x98\x9b\x6a\xfc\x0b\x98\x87\x87\x50\x76\xa2\x64\xc6\x36\x47\xe3\xf5\x51\xea\x83\xd3\x04\x5a\x8b\xb5\xea\xa3\x73\x66\xec\xca\xeb\xad\x57\xab\x80\x56\x68\xba\xe6\x08\x01\x72\x64\x9d\x23\xf1\x47\x99\xa9\x96\x18\xf6\x13\x30\x99\xa9\xaa\x54\xb3\x55\x7b\x30\xa8\x77\xa8\xeb\xb2\xbd\xed\x43\xfc\x6f\xcc\xd8\x33\xf8\x9e\x40\x85\xef\x3f\x80\x72\xde\x66\x91\x28\x26\xaf\x8d\x27\x73\x8e\xcb\x97\x43\xc2\x8b\xf4\x32\x3f\xbf\x7e\x99\x18\xd0\xdb\x6b\xf8\x5a\x2d\xa0\xff\x1f\x0e\xec\x60\x33\xca\xbb\x7d\x5c\xfd\xc3\x19\x7d\xf9\x35\xaa\x2f\xb7\x5d\x39\xe9\x0c\xb6\x2b\x0f\xfd\xd1\x8c\x78\xb4\xae\x62\xc4\xa7\x7d\xfb\x23\x4e\xed\xc9\x90\x96\x9c\xfc\x0d\x00\x00\xff\xff\x60\xca\xfe\x17\x27\x09\x00\x00")

func templatesCmdusagesTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesCmdusagesTmpl,
		"templates/cmdusages.tmpl",
	)
}

func templatesCmdusagesTmpl() (*asset, error) {
	bytes, err := templatesCmdusagesTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/cmdusages.tmpl", size: 2343, mode: os.FileMode(420), modTime: time.Unix(1539175531, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xca, 0xd0, 0xb5, 0x4f, 0xfd, 0x54, 0xca, 0xe1, 0x6d, 0xa9, 0x66, 0x4, 0x48, 0x42, 0x33, 0x4, 0x72, 0xb8, 0xe0, 0x6a, 0x9a, 0x3c, 0x20, 0x26, 0xf4, 0x66, 0x7b, 0x6d, 0xde, 0xbe, 0x8f, 0xa6}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/cmdmsgs.tmpl": templatesCmdmsgsTmpl,

	"templates/cmdusages.tmpl": templatesCmdusagesTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"cmdmsgs.tmpl":   &bintree{templatesCmdmsgsTmpl, map[string]*bintree{}},
		"cmdusages.tmpl": &bintree{templatesCmdusagesTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
