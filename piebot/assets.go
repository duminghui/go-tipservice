// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/cmdmsgs.tmpl (5.322kB)
// templates/cmdusages.tmpl (5.558kB)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesCmdmsgsTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x58\xdb\x6e\xe3\xbc\x11\xbe\xd7\x53\x4c\xb3\x17\x6e\x8d\xc4\x0f\x60\x2c\x16\x70\x0e\x45\x53\xac\xd3\x60\x93\xb4\xd8\xab\x35\x2d\x8d\x6d\x76\x29\x52\x25\xa9\x38\x86\xc0\x3e\xfb\x8f\x21\x29\x59\x8e\x2d\x59\xf9\x77\xb1\x37\x6b\x6a\x66\xbe\x99\x6f\x0e\x1c\xa6\xaa\x32\x5c\x71\x89\x70\xb1\x65\x42\xa0\x9d\x33\x2e\x2d\x4a\x26\x53\xbc\x80\x2b\xe7\x92\xaa\x9a\x38\x07\xff\xf1\x1f\x21\xdf\x7f\x4d\xaa\xea\x0a\x50\x66\xce\x25\x49\xcb\x08\xb7\x9b\x4c\xb3\xed\x9c\xcb\x59\xae\x4a\x69\xef\xb4\x6e\xec\xbc\x18\xd4\x73\x94\x96\x2b\xe9\x1c\xd4\xa2\x90\x73\xc9\xf3\x32\x07\xe6\x15\x80\x1b\x58\x54\xd5\x64\xce\x49\xa8\xaa\x26\x4f\xbb\x7c\xa9\x84\x73\x8b\x7e\xc4\x7f\x33\xc1\x33\x66\x71\x96\x65\xba\x1b\x94\x2c\x93\x84\x73\x0b\x02\x92\xca\xb6\x21\x46\x06\x58\x96\x69\x34\xa6\x1f\xeb\x5a\xd9\x0f\xc1\x70\x09\x4b\x65\x47\x06\x02\xc7\x97\xb0\x53\x25\xa4\x4c\x42\x69\xd0\xcb\x3e\x6a\x5c\xf1\x37\xe7\x0a\x8e\x0b\x48\x55\x9e\x33\x99\x81\x55\xb0\xe6\xaf\x08\x46\xe5\xa8\x24\xb6\x1d\xed\x77\x2f\x30\xff\xa0\xec\x9d\x54\xe5\x7a\xd3\xed\x26\xb9\x91\x29\x39\xb2\xb0\x61\xaf\x08\x28\x55\x69\x37\x75\x1e\xac\x6a\x52\xd4\x0f\xf7\x54\xa6\x29\x1a\xd3\x83\xd1\xa4\x9a\x68\xf1\xd6\x0f\x53\x4b\x58\x2d\xca\x12\xfb\xb6\x42\x9c\x92\xc4\xf3\xdb\xdf\x11\x0f\x85\x13\x7f\x7c\xf7\x56\xbc\x68\xe1\x9c\xff\x71\x7f\xeb\x5c\xf2\xa0\xb6\x04\xa6\x61\xc9\x04\x15\xe8\xf4\xb4\xd7\x4b\x26\x82\x0b\xed\xf2\xfe\x7e\x5e\x2f\xc3\x42\x19\x6e\xef\xe5\x4a\x75\x44\xea\x8d\x1c\x56\x53\x54\xaa\xab\x0a\xb8\x99\x26\xed\x40\x4f\x22\x15\x1c\x83\x87\x73\x2e\xbb\x73\x37\x3f\xec\x9a\xd3\x2d\x03\x4c\x08\xb5\x45\x5f\x4b\x4b\x84\x8c\x1b\xab\xf9\xb2\xb4\x1d\xdd\x5b\x70\x6c\xaa\xe6\x5c\xfb\x9e\xa8\x9d\x75\xbb\x76\x5a\x58\x85\x40\x66\xd0\x17\x7b\x5d\xdb\xed\xa2\x8f\x24\x2d\x7c\xc1\xa3\x7d\x4f\x5a\x8f\xab\x8f\xa8\x0a\x81\x6d\x1f\x9d\x83\x07\x05\x85\x3f\x3f\x0a\x1a\x0a\x8e\x97\xf0\xac\x77\xc0\xd6\x8c\x4b\xd8\x6e\x50\xd6\xb2\x4c\x23\x28\x29\xb8\x1c\x40\xcd\x1d\x4b\x7b\x9a\x8a\xf8\x47\x99\x9d\xac\xf3\x38\x72\x22\x59\x07\x2c\x91\xdc\x37\x4c\x91\xbf\xa2\xbe\x89\xaa\xc1\xb7\x6e\x06\x08\xc7\xcb\xfe\x83\xb7\xea\xf9\xa8\x2a\x29\xee\xbe\xd6\xfb\x33\xc8\xed\x9e\x9f\x0a\x25\x04\x2f\x54\x31\x85\xff\xbf\xfb\x57\x55\x93\x1b\xc5\xe5\x03\xcb\xa9\x8b\x1f\x39\xbe\x97\x98\xa6\x4c\x66\x3b\xea\xb9\xe8\x1e\x91\x7b\xe4\x62\x55\x69\x26\xd7\x08\x8d\x9f\x26\x88\x50\xff\x7b\xf7\xaa\x8a\xaf\x60\xf2\xb4\x51\xdb\x99\x10\xa1\x2c\x9c\x83\xbf\x32\x21\x7a\xa2\xfb\x5b\x54\x3e\x1d\x65\xba\x61\x52\xa2\xf8\x57\x81\x9a\x59\xa5\x7b\xa6\x5c\x3c\xe2\x2b\xc0\xff\xc1\xa4\x56\x80\x0b\x96\x65\xb5\xf8\x05\x5c\x38\x37\xcb\x32\xcc\xc0\x04\x43\xab\x52\x88\x5d\x40\x16\x06\xdb\x62\xdf\x30\x57\x34\xf6\x8f\xe4\xbc\x87\x8b\x76\x7f\x8f\x4c\xdd\x51\x54\x58\x5b\x60\xa9\xa5\x1b\x83\x4b\xb0\x1b\xa4\x76\x0b\x31\x98\x30\xd3\x22\x87\x37\xf1\x10\x9c\x83\xcf\x9f\x3c\x8b\x5f\xaa\x8a\xbc\x70\x8e\x06\x46\xa3\xd5\x4b\x4f\xc1\x91\x76\x85\x39\x93\x6c\x8d\xfa\x2b\x37\xb1\x00\xc7\xe3\x71\x3c\x9b\x8e\xc7\xe3\x04\x60\x3c\x26\xaa\xa6\xfe\xff\x00\x57\x50\x55\xff\x55\x5c\xc2\x24\x4a\x19\xb8\xb8\xa4\xa8\xbd\xe4\x37\x25\xb0\x53\x92\x3e\x36\xd2\x03\x7c\xea\x19\xd5\xc4\x95\x41\xfd\x8a\x1a\xf2\xe8\x6c\x52\x55\x16\xf3\x42\x30\xdb\x11\xdc\xe4\x0c\x6a\x0f\xdc\x53\x80\xba\x51\x72\xc5\xd7\x87\xb9\x50\x5c\x86\x63\x13\xb8\x6b\x65\xb7\xa6\x2f\xcc\xc9\xe9\x78\x0c\xad\xa1\xe9\xbf\xcc\x42\xba\x9b\x2c\x7b\x11\x6a\x84\x3a\xc5\xd4\x18\x81\xc3\x26\xe9\xbe\xc4\xea\x74\xcf\xf6\xd9\x3e\x4e\xf6\x30\x42\x8e\x64\xee\xde\x52\x51\x66\x38\x8c\xb4\x10\x4e\xf7\x30\x2d\xfc\x77\x7f\x5d\x5c\x2b\x5b\x07\xef\x97\x2a\x8d\x3e\x83\x19\xac\x94\xa6\x72\xa7\x15\x6b\x00\x56\x60\x97\x66\xf9\x1b\x37\x3d\xf7\x5b\xeb\x6e\xb3\x1b\x4e\x7d\xc6\xe5\xc8\x80\xf1\xea\xb0\x38\xbf\x98\x1e\x46\xd8\x0f\x56\x5f\x8b\xad\x70\xf7\xb1\xa6\xbe\x3e\x4a\xcd\xfc\xac\xb1\xca\x07\x7b\xe0\x00\xac\x18\x17\x98\xfd\x25\x39\x54\xdc\x30\x03\x4b\x44\xd9\x58\x88\x64\x7d\xd4\xf9\xfe\x05\xef\x57\x7d\xef\x98\x73\xc7\xce\x50\x45\xf5\x34\x59\x13\x24\x5b\x0a\x3c\x4c\xd7\x34\xb9\xda\x4f\x93\x80\x3c\x68\x90\x1c\x94\x72\x1c\x6e\xf1\x0c\xfc\x34\x8a\x23\x6e\x6f\x3c\x7e\x1d\x3c\xaa\xa2\xfc\xb0\x51\x85\x11\x5a\x7b\xe8\x5f\xea\xbd\x59\x69\xd5\x23\xd3\x2c\x37\x5f\x71\xbf\x64\xde\x1e\xed\x73\x4d\x72\xbd\xec\x7b\x48\xb2\xf2\x62\xd8\x1a\xcf\x83\xc5\xf9\xd3\x40\xfd\xb3\x34\x16\x24\x62\x46\x5b\xd7\x0e\xe8\x7d\xf3\xf9\x53\x1c\x45\x5f\x4e\xe1\x78\x6f\xa3\x95\x81\x98\x94\x85\x06\x70\x4e\x80\x3e\x34\x8f\x45\x1c\x76\xe3\x90\xe6\x40\x90\x27\xcb\x6c\x69\x1a\x98\xf0\x13\x72\x42\x5b\x22\x8c\xc2\x4e\x39\x02\xa5\x61\xc4\x84\x18\x75\x42\x06\xc5\x81\xa0\xf7\xd2\xa2\x7e\x65\xa2\x35\x51\x4e\x5b\xad\x05\x07\xda\x3d\xb7\xf4\x7f\x0e\xfb\xfd\x97\x26\x3e\x06\xb2\xcc\x97\xa8\x3b\x1d\x08\x16\x3f\x04\xdf\xf7\xec\xf9\x9d\x38\xbf\xe1\x81\xcc\xb2\x8c\x96\x5a\xb2\x09\x96\x99\x9f\xc9\x03\x55\xb4\x9f\x6f\x65\x7e\x6a\xdd\x5e\x5c\xfa\x85\x9c\xac\x75\xbc\x33\xeb\x7e\xd9\xa5\x02\x9f\x79\x8e\x67\x53\xdc\x48\x0e\x2d\x9e\xbb\x37\x8b\x32\x1b\x64\x7b\xb6\xb2\xa8\x49\x72\xa8\xe9\xda\x60\x4d\x0a\x11\x14\x2e\xa7\xb6\xde\x89\x2e\x7a\x77\xc5\xc4\x87\xcb\x7b\x7e\x0f\x2e\x8b\x7e\x02\xa3\xc5\xdb\xf9\x87\x6c\x26\xa9\xe0\xe9\x4f\xd0\x48\x9b\xb4\x92\x30\x65\x5a\xab\xad\xf9\x91\x52\x2a\x51\xa7\x42\xa5\x3f\xb7\xdc\xe0\x94\xb2\xaf\x71\xa5\xd1\x6c\xc2\x7e\xe0\x4d\x71\xb9\x52\x47\x26\x8c\x55\xc5\x8f\x65\x69\xad\x92\x5e\x8d\x7e\x03\x0d\x55\x1d\x16\x7d\xaf\xfe\x4c\xd5\xd3\x17\x0f\x09\x3c\xc4\xca\x0d\x2f\x84\xfd\xa5\xf1\xfd\xcc\x5b\x5c\x97\x12\x7c\xbc\xf4\x00\x23\x47\x69\xeb\xf7\x49\xe6\x78\x7f\xeb\xdc\x65\x2b\x84\xe0\x54\x06\xcb\x1d\x5c\x2b\x9b\x5c\xd7\x7f\x14\x09\xc8\xd3\xae\x77\x64\xf2\x22\xfd\x05\xac\x73\xcc\xa0\x25\xdb\x3a\x3e\xa9\xd6\x3b\xe5\x4c\x08\x34\xbe\xa2\x9e\xf7\x34\x9b\xda\xcd\x96\xfe\x1f\x01\x00\x00\xff\xff\x9c\x2e\x3e\xe5\xca\x14\x00\x00")

func templatesCmdmsgsTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesCmdmsgsTmpl,
		"templates/cmdmsgs.tmpl",
	)
}

func templatesCmdmsgsTmpl() (*asset, error) {
	bytes, err := templatesCmdmsgsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/cmdmsgs.tmpl", size: 5322, mode: os.FileMode(420), modTime: time.Unix(1539663312, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x4e, 0x65, 0xaf, 0x65, 0x2e, 0xfb, 0xe7, 0x21, 0x9c, 0xdf, 0x75, 0xbd, 0x55, 0x36, 0x44, 0x57, 0xf7, 0x4e, 0x80, 0xa, 0x77, 0x11, 0x9, 0xd, 0xdb, 0xd9, 0xbe, 0x8, 0x18, 0x52, 0x72, 0x54}}
	return a, nil
}

var _templatesCmdusagesTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x57\xdd\x6e\xdb\xb8\x12\xbe\xf7\x53\x0c\x72\x50\xe4\x1c\xc3\x11\x5c\xf4\xe6\xc0\x70\x8c\xa6\x41\x17\x0d\xb0\xd9\x1a\xdb\xff\x76\x17\x10\x2d\x8d\x6c\x62\x25\x52\x4b\x52\x4e\x02\xd5\xef\xbe\x18\x52\x92\x45\xc9\xb2\x73\x91\x6c\xae\x1c\x6a\x38\xf3\xcd\x37\xbf\x2c\xcb\x18\x13\x2e\x10\xce\x32\xc6\xc5\xd9\x6e\x57\x96\x28\xe2\xdd\x6e\x34\xda\x7f\x29\x34\x5b\xe3\x19\x5c\xec\x76\xa3\xb2\x0c\x3e\x69\x54\xb7\x28\x0c\x97\x62\xb7\x83\xb2\x0c\xae\xb3\xf8\x37\x96\xe1\x6e\x07\x91\xcc\x32\x26\x62\xb0\x17\x66\x65\x79\xf6\x07\x69\x1c\x95\xe5\x05\xf4\x94\xe6\x1c\x3f\xb5\xf5\xf2\x04\x82\x1b\xfd\x61\x23\xef\xec\xf1\x3b\x2e\x0c\x81\x31\x98\xe5\x29\x33\x7b\x14\x01\x54\x18\xed\xbd\xf1\x78\x5c\x96\xc1\x52\x61\xc2\xef\x77\xbb\x9c\x23\xfc\x78\xad\x30\x42\xbe\x45\x15\x04\xc1\x9f\x30\x67\x99\x2c\x84\x59\x8c\xc7\xe3\x11\x40\xc6\x05\xcf\x8a\x0c\xdc\xe1\x8c\xae\x72\xbc\xe5\x95\x23\x1f\x1e\xb2\x95\x4c\x87\x00\xaf\x58\xda\x02\xec\x1b\x5e\xb1\xd4\x19\x58\xa3\x81\x15\x4b\x99\x88\xb0\x32\x72\x58\x59\x8c\xb9\xd4\xdc\x0c\x2a\xac\xbe\xef\x95\x56\x07\xc0\xe2\x58\xa1\xd6\x87\xb5\xde\x71\xb3\x89\x15\xbb\x7b\x72\x62\x6b\xc5\x30\xaf\xec\x2f\x4e\x12\xfb\xa5\xba\xd2\x67\x17\xc0\xdc\x27\x48\xf9\x91\x2b\x2e\x4c\x02\x67\x2f\xd6\x2f\x5e\x9c\x41\xf0\xf1\xfe\x17\xc4\x25\xaa\x08\x09\x22\xc8\xa4\x31\x02\x52\x35\x26\xca\xd2\x09\x3e\x32\x6c\xd1\x86\x09\x81\xe9\x93\x53\x52\xe9\xb5\x8c\xfc\x54\x98\xc9\x2d\x2e\x60\xfe\x9f\xea\x38\x08\x82\x8a\x19\x16\xc7\x84\xde\x49\x00\x8b\x0c\xdf\x22\xd4\x97\x13\xa9\x20\x6c\xb9\x10\x9e\xeb\xba\x88\x06\x42\xbc\xc1\x34\xff\x74\xa4\x1e\x1f\x64\x01\x11\x13\x50\x68\x04\xb3\x41\x8d\x8d\xbe\xbe\xb1\x51\xdb\xe5\x7d\x3d\x06\x56\xef\xfe\xcb\x3e\xf1\xbb\x5f\xfc\x2c\xee\x7e\xed\x64\x23\x91\xd9\x70\x7f\xcb\x04\x5b\xa3\xaa\x7c\xd8\xdf\xf1\xa3\x15\x1c\xaa\xf0\xab\xc2\x48\xb8\xd0\x30\x97\x22\xe5\x02\x7f\xb2\x34\x5d\xc0\x05\x87\x39\x17\x06\xd5\x96\xd1\x7f\x6c\x9f\x39\x17\x11\xcc\xa3\x87\x28\xc5\x8f\x3c\x43\xbd\x80\x0b\x84\x39\x4b\x0c\x2a\xc3\xb3\x76\xc4\x16\x30\x7f\xad\x64\x8a\x55\xd8\x88\xbf\xb0\x6f\x38\x84\xb5\xb4\xf5\x98\x49\x85\xc0\x45\x22\x55\xc6\x88\xfa\x76\xb8\x6a\x27\x3f\xf3\xfc\xbd\xb0\x2e\x5e\xb4\xfe\x3c\x7f\xb7\x3c\xf7\xd8\x3b\xce\xce\x96\xe7\x4b\xc9\x85\xd1\x03\x8c\x6f\x79\xfe\xbb\x4c\xf1\xc4\xe7\x53\x2a\xae\x1d\x21\xa7\x25\x0e\x28\xda\x53\xd0\xff\xe5\x37\xff\x5b\xc6\x45\xe5\xe7\x93\xd4\x66\x59\x06\x6f\xa4\x69\x4f\x82\xac\x62\xd1\xaf\xd0\xd7\x85\x46\xf5\xb3\x0e\x75\xaf\x40\xeb\x4b\x54\x2c\x4b\x8e\x6f\xe4\x40\x03\xaf\x3c\x70\xf6\x9e\xc9\x81\xdc\xfe\x86\xb9\xb6\x05\xbb\x80\xb9\x3b\x70\xb0\x23\x29\x12\xbe\x6e\x3e\x9e\x37\xc3\xd7\x09\x8d\xc0\x6b\x05\x61\x5f\x7b\xca\xb5\x09\xc1\xb8\x74\x76\xda\x0a\xc5\x56\x29\x82\x53\x39\xd0\x80\x2a\xc7\x6f\x44\x22\xbd\xe9\xd5\x37\x40\xd5\x61\xa1\xea\x8d\xbc\x03\x8d\x6a\x8b\xaa\x86\x4d\xdf\x8e\xea\xff\x95\x6b\x73\x42\x3f\x39\x60\xf5\xd3\x0f\x60\x69\xea\x7b\x11\x49\x2e\xce\x35\x39\x73\xca\x97\xb7\xf7\x51\x5a\xc4\x4f\xb3\x8e\xf4\x61\xa2\xd3\xee\xa7\xe1\x0f\x9b\x80\xb4\xa1\x1c\xc8\xc1\xf6\x2d\x12\x3b\x8e\xfe\xdd\x89\x89\xf0\x6d\x70\x22\xcc\xba\x03\xa0\x13\xd8\x6e\xe5\xf7\x43\x33\x20\xe1\x55\xc5\x80\x8c\x5f\xfb\x03\x42\x7e\x64\x82\x23\xed\x84\x9a\xf3\x92\x29\x96\x7d\x30\xcc\x14\xda\x4b\x9d\xce\xb0\x98\x8d\xc7\xf0\x5e\xa4\x0f\x54\xdf\x94\xff\xee\x13\xe4\x28\xf3\x14\x35\xc5\x81\x72\xa9\xfe\x37\x94\x39\x11\x39\x8b\x31\x61\x45\x6a\x2a\xe9\xf0\x34\x90\x9b\x6a\x1c\xf9\x50\xda\x73\x8a\x80\xcc\xbf\x6e\xbe\x65\xdf\xf5\xe2\xbf\x5f\x61\x23\x0b\x05\xdf\x68\xcf\x29\x0c\xc2\x77\xd0\x18\x49\x11\xc3\xff\x80\xca\x27\x95\x62\x0d\x34\xb2\x08\x31\x01\x97\x22\xc2\x09\x84\x59\xa1\x0d\x2c\xe0\xe5\xff\xa7\x7a\xd2\x41\x4a\x67\xe1\x08\x00\xe0\xed\x3d\xcb\xf2\x14\x67\x10\xbe\xdc\x84\xc0\x35\x48\x81\xd6\xdc\x84\x4e\x5e\x4d\xb3\xea\xd0\x41\xa0\x26\xf2\x6a\x5a\xe1\x18\xce\xbd\xc6\xd1\x2b\x3b\x69\x7d\x37\xab\x01\x4c\xeb\xe1\x0c\xc2\x5b\x02\xb9\x42\x60\x20\x8a\x6c\x85\x0a\x16\x97\x30\xb0\x7b\x87\x00\xe3\xf1\x38\x54\xf8\x77\xa1\x38\xc6\x21\x4d\xe3\x93\x08\xae\x9b\xf9\xee\xa3\xf0\x47\x3f\xd1\xfd\x4e\xde\x51\x8b\x7f\xb0\x54\x6a\xe2\xd2\xae\x13\x4b\xde\x70\xe9\xc1\x84\xe9\x04\xba\xac\x4e\x1f\x11\xfb\x2b\x5a\x30\xc8\xaa\x8f\xc7\x5b\x3d\x6a\x38\x5e\x64\x6b\x34\x60\xe5\x20\x52\x48\xe5\x60\x98\xfe\x6b\x02\x9a\x65\x08\x4c\xef\x13\xc8\x6d\x30\xab\xc2\xd4\x69\x70\x49\x71\x73\x69\xa3\x7b\xc0\x5f\x51\x36\x9c\xa6\xb2\xb7\x2e\x8f\xc7\xfb\x1d\x89\x30\x7f\xd9\xf0\x68\x53\x6f\xb0\xe7\xba\x2a\x14\xdb\x62\x68\x92\xe4\x96\xca\x8e\xed\xa8\x50\x0a\x85\xa9\x6f\x85\x36\xc6\x37\x09\x24\x3c\x4d\x81\x1b\x68\x98\x37\xd4\xa2\x08\x21\x6d\xff\xf4\xb3\x9e\x6a\xb6\xe8\x1e\x95\x0c\xb4\xe2\xf8\xf0\xdd\xb0\x77\xd8\x25\x65\x3a\x29\xae\x4e\xdb\xb8\x2d\xaa\x0e\x72\x6a\x05\x24\x38\x81\xdb\xa7\xc1\xf8\x1c\x8f\xde\x7f\x67\x25\xbe\xa2\x21\x25\x10\x18\x59\x23\xba\x28\x2d\x47\x00\x9d\xbe\x7d\xb8\x13\x07\xf6\xe1\x37\x24\xda\xe9\x95\xc7\x85\xbd\x7e\x73\x5c\xb4\xd7\x18\x4e\x68\xee\x94\xed\x09\xe5\xbd\xb7\xca\xb0\x6c\x2b\x29\x07\xa7\xd8\xfe\x2d\xd0\x0f\xf2\x96\xe7\x2e\x08\x94\x2b\x34\xca\xd5\xb9\xf6\x1f\x73\xf0\xf9\x66\x09\xb9\xdd\xc8\x07\xd5\xb7\x1f\x07\x07\x6d\x58\x81\x96\x21\xd2\x79\x64\x03\x39\xf4\xa0\x78\xba\xc4\xf6\xb4\x37\xf5\x3a\x77\x3e\x56\x39\x79\xed\xd6\x49\xb3\x61\xc6\x8e\x49\xdb\xdb\x9d\x04\xc4\xd2\x9d\xd7\x37\x8d\x84\x22\x5f\x2b\x16\xe3\x08\x1a\x35\x50\x77\xce\xe9\x04\x78\x02\x97\xf6\x47\x8c\x29\x52\xdb\xdd\x70\x6d\xdd\xa7\x2e\x77\x9c\xd9\xce\x9b\xe9\xa0\x33\xb5\x8c\x43\x5e\x31\x7c\xdd\xf4\xd1\x35\xa7\xd5\xcf\x41\xb7\xb8\xef\x36\x28\xa8\xb7\xe4\x04\x26\x76\xd5\x76\xc2\xfe\xf3\x45\xc2\x33\xe0\xb5\x88\x43\xf1\xd0\xdd\x58\xd0\x33\x83\xfc\xeb\xf8\xb4\x9f\x22\x55\x2f\x79\x74\x58\x5a\xf3\xe7\x78\x64\x9e\x8f\x92\x26\x31\xa9\x1c\xbb\x44\x54\x1b\xbd\x2e\x56\x75\xb5\xb6\xea\xb3\xe5\xe7\x62\x3a\xb3\xb2\xee\xff\x09\xcc\xa7\x33\x7b\xa9\x16\x98\xc0\xe5\x74\xc6\xd7\x42\x2a\x6c\xb9\xf8\x4f\x00\x00\x00\xff\xff\x0c\x7a\x19\x41\xb6\x15\x00\x00")

func templatesCmdusagesTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesCmdusagesTmpl,
		"templates/cmdusages.tmpl",
	)
}

func templatesCmdusagesTmpl() (*asset, error) {
	bytes, err := templatesCmdusagesTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/cmdusages.tmpl", size: 5558, mode: os.FileMode(420), modTime: time.Unix(1539771749, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc5, 0x18, 0xab, 0xa3, 0x7e, 0xcb, 0xe4, 0x8a, 0xd4, 0x71, 0x79, 0x7a, 0xa5, 0xa, 0x8d, 0x35, 0xa2, 0xf5, 0x80, 0x96, 0x2f, 0x99, 0x72, 0x3a, 0xb7, 0xa9, 0xd, 0xaa, 0x12, 0x9b, 0xcb, 0x84}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/cmdmsgs.tmpl": templatesCmdmsgsTmpl,

	"templates/cmdusages.tmpl": templatesCmdusagesTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"cmdmsgs.tmpl":   &bintree{templatesCmdmsgsTmpl, map[string]*bintree{}},
		"cmdusages.tmpl": &bintree{templatesCmdusagesTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
