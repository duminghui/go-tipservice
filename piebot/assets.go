// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/cmdmsgs.tmpl (3.396kB)
// templates/cmdusages.tmpl (1.978kB)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesCmdmsgsTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\x4d\x6f\xe3\x36\x10\xbd\xeb\x57\x4c\xdd\x43\x00\x63\xe3\x1f\x20\x14\x2d\xb2\x69\x0a\x2c\x50\xa7\x8b\x64\xd3\xa2\x37\xd1\xe2\xc8\x9e\x82\x22\x55\x92\xca\x07\x08\xf6\xb7\x17\x24\x25\x45\xb2\x2d\x25\xbb\x8b\x5c\x1c\xea\x91\xf3\xe6\xbd\x99\x21\x9d\xe3\x58\x91\x44\x58\x3d\x31\x21\xd0\x6e\x19\x49\x8b\x92\xc9\x12\x57\x70\xe9\x7d\xe6\xdc\xc6\x7b\xf8\x2b\x7e\x84\xfa\xf5\x6b\xe6\xdc\x25\xa0\xe4\xde\x67\xd9\xe8\x10\xb2\x07\xae\xd9\xd3\x96\xe4\x55\xad\x5a\x69\x6f\xb4\x1e\xce\x79\x30\xa8\xb7\x28\x2d\x29\xe9\x3d\xf4\x50\xa8\x49\x52\xdd\xd6\xc0\xe2\x06\x20\x03\x85\x73\x9b\x2d\x05\x90\x73\x9b\xfb\x97\x7a\xa7\x84\xf7\xc5\x72\xc4\x3f\x99\x20\xce\x2c\x5e\x71\xae\xe7\x83\x86\x93\x03\xc2\xfb\x22\x04\x92\xca\x8e\x43\x5c\x18\x60\x9c\x6b\x34\x66\x39\xd6\x47\x65\xbf\x2a\x0c\x49\xd8\x29\x7b\x61\x20\x69\xfc\x01\x5e\x54\x0b\x25\x93\xd0\x1a\x8c\xd8\xcf\x1a\x2b\x7a\xf6\xbe\x21\x2c\xa0\x54\x75\xcd\x24\x07\xab\x60\x4f\x8f\x08\x46\xd5\xa8\x24\x8e\x89\x2e\xd3\x4b\xca\xdf\x2a\x7b\x23\x55\xbb\x3f\xcc\xd3\x0c\x34\xb8\x92\x17\x16\x0e\xec\x11\x01\xa5\x6a\xed\xa1\xf7\xc1\xaa\xc1\xa2\xac\x28\x8a\x8f\x4c\x04\xdb\xbb\xaf\x79\x48\x30\xfe\x9a\x9a\x94\x3d\xc8\x52\xc9\x8a\x74\x8d\x7c\x04\x1d\xad\x9e\xdb\x55\x14\x6f\x98\x7b\xdf\x96\x25\x1a\xb3\x90\xc6\x50\x4d\x33\xc4\x42\x3a\x23\x57\x32\xfb\x5c\x21\xe6\x01\xf1\xe5\xf9\x37\xc4\xa3\x2c\xe2\xf2\xcd\x73\xf3\xa0\x85\xf7\xf1\x9f\x4f\xbf\xce\xa9\xbe\x63\x22\x05\x9c\x61\xf7\xb7\x6a\x35\xec\x92\x7a\x79\x50\xf2\xba\x97\x22\x9f\x23\x3b\x56\x31\x82\xbe\x55\x3f\x8e\x8d\x32\x64\x3f\xc9\x4a\x2d\xb1\x9b\xb6\x40\xb7\xa9\x6f\x05\x20\x93\x67\x63\xe9\xce\x46\x6a\x08\x13\xb3\x2d\xc9\xf9\x82\xdb\x4e\x5b\xfd\x7c\x9f\x03\x13\x42\x3d\x61\x6c\x80\x1d\x02\x27\x63\x35\xed\x5a\x3b\x33\x72\x1a\xc2\xa1\xd4\xdf\x9a\x39\x67\x0a\x7e\x3f\x2e\xf8\x51\xac\x46\x20\x33\x18\x3b\xb4\x6f\xc8\x71\xa7\x76\x22\x15\xb1\x4b\xd1\x1e\x8b\x76\xa6\x63\xde\x63\xf6\x18\xfb\xad\x9e\x47\x3d\x3e\xa3\x6a\x04\x8e\x85\xf0\x1e\x6e\x15\x34\x71\xfd\x44\x59\x68\x08\x3f\xc0\x17\xfd\x02\x6c\xcf\x48\xc2\xd3\x01\x65\x8f\x65\x1a\x41\x49\x41\xf2\x1d\xfa\xdf\xb0\x72\x61\xdc\x04\xf6\x28\xcf\x66\xd3\x0f\xe3\xce\x91\x89\x15\x01\x77\x87\x25\xd2\x23\xea\xeb\x6e\x6b\xe2\x36\x33\xa6\x1b\xc2\xc9\xc0\xc8\x85\x12\x82\x1a\xd5\xe4\xf0\xdf\xd1\x9f\x73\x9b\x6b\x45\xf2\x96\xd5\x61\x04\x34\x84\xc7\x88\xbc\x64\x92\xbf\xe4\xd9\x60\x5e\x48\xf1\x64\xb4\x38\xa7\x99\xdc\x23\x0c\x3c\x4d\x82\x84\xe1\x91\xe8\x9d\x25\x5a\x1e\x98\x94\x28\xfe\x68\x50\x33\xab\xf4\xc2\x94\xeb\x96\xa8\x02\xfc\x17\x36\xfd\x06\x58\x31\xce\x7b\xf8\x0a\x56\xde\x5f\x71\x8e\x1c\x4c\x3a\xa8\x6a\x85\x78\x49\x91\x85\xc1\x31\xec\x0e\x6b\x15\x6e\x96\x13\x5c\x64\x58\x8c\xcb\xec\xc2\xf4\xf5\x1f\x1c\x7a\x02\x56\xda\x70\x29\x91\x04\x7b\xc0\xd0\x1c\x29\x07\x93\xc7\x03\x3a\x19\xae\xbb\x45\xf0\x1e\x7e\xfa\x31\x0a\xf1\xb3\x73\x81\x85\xf7\xa1\xbd\x87\x5d\x8b\xf2\x34\x84\xe1\x39\xb2\x65\x92\xed\x51\xff\x4e\xa6\x1b\xb1\xeb\xf5\xba\x5b\xcb\xd7\xeb\x75\x06\xb0\x5e\x07\xa9\xf2\xf8\x1b\xe0\x12\x9c\xfb\x47\x91\x84\x4d\x87\x32\xb0\xfa\x10\xb2\x8e\xc8\x3b\x25\x70\x16\x19\x3e\x0e\xe8\x77\x70\x5a\x18\xac\x41\x2b\x83\xfa\x11\x35\xd4\x1d\xd9\xcc\x39\x8b\x75\x23\x98\x9d\x49\x6e\xf3\x46\xd4\x85\x70\xf7\x29\x54\xbc\x5b\xf6\x53\x2f\x14\xc9\xb4\x6c\x92\x76\x23\x77\x7b\xf9\xd2\x54\xcb\xd7\x6b\x18\x8d\xb8\xf8\xe5\x2a\xd9\x3d\xb8\x1c\x21\x54\xbd\x5a\x1c\x4a\x3c\x69\x38\x98\x1e\x4b\xac\xb7\xfb\xea\xd5\xed\x53\xb3\xbf\x57\x90\x44\xf5\x68\xcc\x35\x71\x11\x8a\x5f\xe2\xdb\x4b\x63\x74\x81\x43\xa5\x74\x28\xd9\xf0\x12\x7b\xc7\x99\x49\xa1\x30\xd8\x9e\xc9\x2c\xdc\x28\xa3\xdb\xc4\x1e\x28\xf4\x0a\xc9\x0b\x03\x26\x6e\x87\xe2\xed\xf7\xeb\x34\x93\xe5\x60\xfd\x45\xd4\x67\x38\x32\x2b\x3c\x1b\x83\xc7\xad\x66\x71\x5e\x58\x15\x93\x9d\x10\x80\x8a\x91\x40\xfe\x43\x36\xdd\x78\x60\x06\x76\x88\x72\x38\xa1\x13\xeb\x6b\xc9\x2f\x3f\xd2\xbe\x97\xfb\xcc\xac\x3a\x25\x13\x2a\x67\xa1\x51\x62\x3d\xf6\x89\xb2\x9d\xc0\xa9\x65\xa1\x75\xba\xc6\x49\xb1\xc3\x24\xbf\xbc\x84\xd8\x36\xa1\x61\xe0\xb4\x8a\xff\x0f\x00\x00\xff\xff\x6d\x0a\x66\x2c\x44\x0d\x00\x00")

func templatesCmdmsgsTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesCmdmsgsTmpl,
		"templates/cmdmsgs.tmpl",
	)
}

func templatesCmdmsgsTmpl() (*asset, error) {
	bytes, err := templatesCmdmsgsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/cmdmsgs.tmpl", size: 3396, mode: os.FileMode(420), modTime: time.Unix(1539057174, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf9, 0xbf, 0x4c, 0x8b, 0xc, 0xc6, 0x34, 0x83, 0xbe, 0xbd, 0x60, 0xfa, 0xda, 0x9e, 0x78, 0x41, 0xf3, 0xea, 0x11, 0xc3, 0xf7, 0xa0, 0xb4, 0x6b, 0x90, 0x77, 0x37, 0xfc, 0x6b, 0x51, 0x27, 0x5b}}
	return a, nil
}

var _templatesCmdusagesTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x94\xdb\x6a\x1b\x3d\x10\x80\xef\xfd\x14\x83\x7f\x42\xc0\x10\x3d\x40\x30\xfe\x43\x0b\x25\x81\xba\x04\xd2\x50\x4a\x5b\x88\xbc\x3b\x6b\x0f\xe8\xb0\x48\x5a\x3b\x41\xd1\xbb\x17\xed\x6a\xed\x3d\x39\xf4\xc2\x77\x42\x33\xf3\xcd\x79\xbc\xcf\xb1\x20\x85\x30\x97\x9c\xd4\x3c\x04\xef\x51\xe5\x21\xcc\x4e\x82\xca\xf2\x2d\xce\xe1\xa6\xfe\x64\xcf\x16\xcd\x1a\x95\x23\xad\x42\x00\xef\xd9\x67\x99\x7f\xe3\x12\x43\x80\x4c\x4b\xc9\x55\x0e\xb5\xc1\xad\xf7\xf3\xdf\x11\x38\xf3\xfe\x06\x1a\x66\x07\x5a\x12\x3e\x77\xb9\x54\x00\x7b\xb0\x4f\x3b\x7d\xa8\xbf\xef\x49\xb9\x18\x8b\x43\x59\x0a\xee\x4e\x51\x30\x48\x21\xd6\x76\x8b\xc5\xc2\x7b\xf6\x68\xb0\xa0\xd7\x10\x4a\x42\xf8\x75\x67\x30\x43\xda\xa3\x61\x8c\xfd\x81\x25\x97\xba\x52\x6e\xb5\x58\x2c\x66\x00\x51\xc1\x7b\xf6\xf4\x26\x37\x5a\x84\x00\x4e\x43\xab\x6d\x67\x00\x92\x14\xc9\x4a\x41\x63\x73\x1b\xc9\x84\x6b\x4a\x79\xb6\x56\xd3\xf9\x6c\xb8\xe8\xe4\xd3\x8f\x6b\xc3\x45\xe3\x7f\x8b\x0e\x36\x5c\x70\x95\x61\x72\x32\x0d\xcb\xb1\xd4\x96\xdc\x59\x60\x92\x9f\xa0\xe9\x03\x78\x9e\x1b\xb4\x76\x9a\x7a\x20\xb7\xcb\x0d\x3f\x5c\xbc\xee\x2d\x18\x96\xc9\xff\x6a\x50\xf7\x71\x61\x7f\x24\x93\x71\x75\x01\xdc\x6b\x81\x71\x7c\x4a\x43\xca\x15\x30\xbf\xda\x5e\x5d\xcd\x81\x7d\x7f\xfd\x82\xf8\x88\x26\xc3\x18\x22\xe8\xe2\xe8\x04\xb4\x39\xba\xf0\xbe\x51\xfc\xc7\xb6\x65\x3b\xae\x14\x8a\x8b\x97\x24\x71\xeb\x8a\xbc\x1b\x94\x7a\x8f\x2b\x58\xfe\x97\xbe\x19\x63\xa9\x32\x3c\xcf\x63\xf4\x8d\x06\xf0\xcc\xd1\x1e\xa1\x35\x2e\xb4\x81\x97\x4e\x0a\x2f\xf0\x62\xdb\x25\x3b\xd3\xe3\x1d\x8a\xf2\xf9\x83\x7d\x7d\xd3\x15\x64\x5c\x41\x65\x11\xdc\x0e\x2d\x1e\x79\x63\x6f\xb3\x6e\xce\xa7\x7d\x65\x35\xf7\x24\x39\x4d\xfe\x50\xd2\x1f\xe3\xa1\x74\x30\x8e\xb1\x9a\x75\x4e\x4d\xf9\xd7\x5c\xf1\x2d\x9a\x58\xe1\xe6\x8c\x74\x4d\xfb\x5d\x63\xdd\xa3\x35\x7d\x6a\xd6\x9c\x54\x22\x5e\xa4\xd5\xff\xc7\x4b\x22\x1b\xe0\xa0\xc7\x77\x95\x45\xf3\x7e\x67\xb4\xc0\xd5\x44\x8b\x5b\xa3\x58\xed\x47\xc2\x4f\xfa\xcc\x09\x48\x41\x37\xf3\x74\xb9\x98\xcb\x9a\x07\x4b\x5b\x37\x79\x05\xcb\xe6\xa3\x89\x34\xd3\xaa\xa0\xed\x51\x78\x7d\x3c\xe8\x8d\xd2\x87\x81\x3e\xa8\x42\xf7\xee\x55\xed\x8e\x54\xa1\x6b\xb4\xdd\xe9\x03\x58\x34\x7b\x34\xad\x9b\x28\xfb\x10\xf9\x95\xac\x1b\x23\x05\x59\x57\x23\xe3\x03\xb8\x10\x89\x57\x19\xbe\x11\x71\x9c\x49\x5d\x5b\xb0\x6f\x52\x8b\x33\x3b\x92\xf0\xf7\xa3\x55\x09\x01\x7e\x9e\xdd\x8f\xdb\xe1\x3a\xf4\xb3\x1e\x0c\xf7\x28\x85\x69\x79\xb7\xbd\xd3\x1a\xbd\xa9\xed\x4d\xf8\xdf\x00\x00\x00\xff\xff\x0e\xc4\xd3\xfc\xba\x07\x00\x00")

func templatesCmdusagesTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesCmdusagesTmpl,
		"templates/cmdusages.tmpl",
	)
}

func templatesCmdusagesTmpl() (*asset, error) {
	bytes, err := templatesCmdusagesTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/cmdusages.tmpl", size: 1978, mode: os.FileMode(420), modTime: time.Unix(1539055724, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6a, 0x57, 0x57, 0xca, 0x5, 0xd0, 0xdd, 0x53, 0xd0, 0xa6, 0x62, 0x4a, 0x80, 0xa4, 0x29, 0x0, 0xc6, 0x6f, 0x4b, 0xf3, 0x5d, 0xeb, 0xb9, 0x23, 0x2f, 0x98, 0x9f, 0x85, 0xe3, 0xdc, 0xbe, 0xa}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/cmdmsgs.tmpl": templatesCmdmsgsTmpl,

	"templates/cmdusages.tmpl": templatesCmdusagesTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"cmdmsgs.tmpl":   &bintree{templatesCmdmsgsTmpl, map[string]*bintree{}},
		"cmdusages.tmpl": &bintree{templatesCmdusagesTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
