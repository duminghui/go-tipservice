// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/cmdusages.tmpl (1.503kB)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesCmdusagesTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x53\xc1\x6e\xe2\x30\x10\xbd\xe7\x2b\x9e\xd8\x03\x52\x04\x11\x67\x04\x68\x25\x2e\xed\xa1\x2b\xb4\x55\xf7\xb4\x87\xba\x78\x12\xac\x4d\xec\x28\x76\xe8\x22\xcb\xff\xbe\xb2\x93\x40\xc2\x42\xa3\x1e\x7a\x4b\xc6\x33\x6f\xde\x7b\x33\x63\x2d\xa7\x54\x48\xc2\xa4\x60\x42\x4e\x9c\xb3\x96\x24\x77\x2e\x8a\x2e\x2f\xb5\x66\x19\x4d\x30\x77\x2e\xb2\x36\x79\xd1\x54\x3d\x91\x34\x42\x49\xe7\x60\x6d\xb2\x2d\xf8\x0f\x56\x90\x73\xd8\xab\xa2\x60\x92\x23\x14\x2c\xad\x9d\xfc\xf6\x88\x91\xb5\x73\xfc\x07\x7a\x14\xe5\x03\xe5\xe5\xcb\x07\xd8\x27\x55\x63\xcf\x24\x6a\x4d\x30\x07\xd2\xd4\x35\xd0\x48\x55\x15\x59\x6b\xa8\x28\x73\x66\x1a\xb4\x16\x29\x09\x48\x22\x45\xf2\xa8\x9f\x98\x64\x19\x55\x2d\xfa\x20\x7b\xa7\x84\x34\x7a\x50\x33\x78\xff\xa9\x72\x1a\x79\x1e\x83\xd8\x1e\x98\x94\x94\x8f\x67\xdc\x00\xea\x0c\xbb\x67\x5d\xcf\xb6\x38\x8e\xad\x4d\x76\x15\xa5\xe2\xaf\x73\x47\x51\xc6\x71\x1c\x01\xcf\x07\xf5\xee\x9d\xab\xa6\x1a\xaf\xd6\x26\xcf\xa7\xe2\x4d\xe5\xce\xbd\xe2\xd7\xe3\x0e\x65\x68\x79\x17\xbe\xaf\xfe\x66\x8f\x90\xd0\x6b\xe4\x31\x2b\x1f\xfb\x10\x72\x20\x74\xde\x1b\x94\xc7\x08\xe1\x07\x21\x8d\xdf\xc1\x8b\x4d\xed\xf2\x25\x68\x57\xf3\x3e\x9f\x06\x1d\xab\xef\x9e\xc8\x06\xab\x46\xe3\xa6\x61\xb9\x55\x32\x15\x19\xcc\x81\x19\x78\xc2\x05\x93\xa7\xd6\x05\x70\xd5\xc4\xbb\x4a\xa3\x50\x97\x59\xc5\x38\x45\x38\xc3\xa0\xa8\xb5\xc1\x66\x8d\xc5\x0c\x22\xc5\x3a\x7c\x70\xca\xc9\xf8\xe5\x14\x3a\xc8\x9f\xea\x31\x67\xaf\x96\xe2\xa6\x98\x2e\xa7\x61\xde\x3a\xdc\x06\xa7\x1a\x99\x38\x52\x47\x3d\xf0\x7e\x3f\x90\xf4\xa7\x51\x7a\x32\x1c\x86\xe9\x3f\x63\xfd\xbf\x6e\x12\x83\x06\x58\x7d\xdb\x37\xff\x77\xe6\xa1\xaf\x67\x61\x54\xa3\xef\x4a\xd3\xfe\xac\x3e\xa8\xfb\xc4\x58\x2e\x95\x23\x93\xf9\x3a\x4b\xce\x8b\xe9\xcf\xf1\xda\x08\xc6\x39\x54\x05\x5d\xbf\x75\xd7\xda\xbb\xcf\x9e\xce\xcd\x62\x19\x72\x9b\xff\x19\x56\x8b\x65\x28\xea\x12\x66\x58\x2f\x96\x22\x93\xaa\xa2\x9e\xc4\x7f\x01\x00\x00\xff\xff\xc5\x5c\xe3\xa4\xdf\x05\x00\x00")

func templatesCmdusagesTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesCmdusagesTmpl,
		"templates/cmdusages.tmpl",
	)
}

func templatesCmdusagesTmpl() (*asset, error) {
	bytes, err := templatesCmdusagesTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/cmdusages.tmpl", size: 1503, mode: os.FileMode(420), modTime: time.Unix(1539792487, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc, 0x4, 0xed, 0xac, 0x9e, 0x2f, 0xe5, 0xf2, 0x1, 0x69, 0xc7, 0x9f, 0xb6, 0x85, 0xbe, 0x4e, 0xf, 0xd5, 0xd6, 0x9e, 0xfb, 0xf7, 0x22, 0xdb, 0xef, 0xc1, 0x8b, 0xbe, 0x9c, 0x52, 0x2f, 0x92}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/cmdusages.tmpl": templatesCmdusagesTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"cmdusages.tmpl": &bintree{templatesCmdusagesTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
