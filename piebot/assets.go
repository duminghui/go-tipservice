// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/cmdmsgs.tmpl (5.36kB)
// templates/cmdusages.tmpl (4.373kB)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesCmdmsgsTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x58\x6d\x6f\xdb\xbe\x11\x7f\xaf\x4f\x71\x4b\x5f\x78\x33\x12\x7f\x00\xa3\x28\xe6\x3c\x0c\xcb\x50\x67\x41\x93\x6c\xe8\xab\x9a\x96\xce\x36\x57\x8a\xd4\x48\x2a\x8e\x21\x70\x9f\x7d\x38\x92\x92\xe5\xd8\x92\x95\x7f\x8b\xbe\x68\x4d\xdd\xdd\xef\xee\x77\x0f\x3c\xb6\xaa\x32\x5c\x71\x89\x70\xb1\x65\x42\xa0\x9d\x33\x2e\x2d\x4a\x26\x53\xbc\x80\x2b\xe7\x92\xaa\x9a\x38\x07\xff\xf6\x1f\x21\xdf\x7f\x4d\xaa\xea\x0a\x50\x66\xce\x25\x49\xcb\x08\xb7\x9b\x4c\xb3\xed\x9c\xcb\x59\xae\x4a\x69\xef\xb4\x6e\xec\xbc\x18\xd4\x73\x94\x96\x2b\xe9\x1c\xd4\xa2\x90\x73\xc9\xf3\x32\x07\xe6\x15\x80\x1b\x58\x54\xd5\x64\xce\x49\xa8\xaa\x26\x4f\xbb\x7c\xa9\x84\x73\x8b\x7e\xc4\x7f\x31\xc1\x33\x66\x71\x96\x65\xba\x1b\x94\x2c\x93\x84\x73\x0b\x02\x92\xca\xb6\x21\x46\x06\x58\x96\x69\x34\xa6\x1f\xeb\x5a\xd9\x0f\xc1\x70\x09\x4b\x65\x47\x06\x02\xc7\x97\xb0\x53\x25\xa4\x4c\x42\x69\xd0\xcb\x3e\x6a\x5c\xf1\x37\xe7\x0a\x8e\x0b\x48\x55\x9e\x33\x99\x81\x55\xb0\xe6\xaf\x08\x46\xe5\xa8\x24\xb6\x1d\xed\x77\x2f\x30\xff\xa0\xec\x9d\x54\xe5\x7a\xd3\xed\x26\xb9\x91\x29\x39\xb2\xb0\x61\xaf\x08\x28\x55\x69\x37\x75\x1e\xac\x6a\x52\xd4\x0f\xf7\x54\xa6\x29\x1a\xd3\x83\xd1\xa4\x9a\x68\xf1\xd6\x0f\x53\x4b\x58\x2d\xca\x12\xfb\xb6\x42\x9c\x92\xc4\xf3\xdb\xdf\x10\x0f\x85\x13\x7f\x7c\xf7\x56\xbc\x68\xe1\x9c\xff\x71\x7f\xeb\x5c\xf2\xa0\xb6\x04\xa6\x61\xc9\x04\x15\xe8\xf4\xb4\xd7\x4b\x26\x82\x0b\xed\xf2\xfe\x7e\x5e\x2f\xc3\x42\x19\x6e\xef\xe5\x4a\x75\x44\xea\x8d\x1c\x56\x53\x54\xaa\xab\x0a\xb8\x99\x26\xed\x40\x4f\x22\x15\x1c\x83\x87\x73\x2e\xbb\x73\x37\x3f\xec\x9a\xd3\x2d\x03\x4c\x08\xb5\x45\x5f\x4b\x4b\x84\x8c\x1b\xab\xf9\xb2\xb4\x1d\xdd\x5b\x70\x6c\xaa\xe6\x5c\xfb\x9e\xa8\x9d\x75\xbb\x76\x5a\x58\x85\x40\x66\xd0\x17\x7b\x5d\xdb\xed\xa2\x8f\x24\x2d\x7c\xc1\xa3\x7d\x4f\x5a\x8f\xab\x8f\xa8\x0a\x81\x6d\x1f\x9d\x83\x07\x05\x85\x3f\x3f\x0a\x1a\x0a\x8e\x97\xf0\xac\x77\xc0\xd6\x8c\x4b\xd8\x6e\x50\xd6\xb2\x4c\x23\x28\x29\xb8\x1c\x40\xcd\x1d\x4b\x7b\x9a\x8a\xf8\x47\x99\x9d\xac\xf3\x38\x72\x22\x59\x07\x2c\x91\xdc\x37\x4c\x91\xbf\xa2\xbe\x89\xaa\xc1\xb7\x6e\x06\x08\xc7\xcb\xfe\x9d\xb7\xea\xf9\xa8\x2a\x29\xee\xbe\xd6\xfb\x23\xc8\xed\x9e\x9f\x0a\x25\x04\x2f\x54\x31\x85\xff\xbd\xfb\x53\x55\x93\x1b\xc5\xe5\x03\xcb\xa9\x8b\x1f\x39\xbe\x97\x98\xa6\x4c\x66\x3b\xea\xb9\xe8\x1e\x91\x7b\xe4\x62\x55\x69\x26\xd7\x08\x8d\x9f\x26\x88\x50\xff\x7b\xf7\xaa\x8a\xaf\x60\xf2\xb4\x51\xdb\x99\x10\xa1\x2c\x9c\x83\x3f\xcf\x84\xe8\x89\x2e\x28\x7d\x53\x02\xa3\x7f\x7f\x25\xd9\xe6\x67\x34\xfd\x97\xf8\xf7\x69\x2e\xd2\x0d\x93\x12\xc5\x3f\x0b\xd4\xcc\x2a\xdd\x33\x0b\xe3\x11\x5f\x01\xfe\x17\x26\xb5\x02\x5c\xb0\x2c\xab\xc5\x2f\xe0\xc2\xb9\x59\x96\x61\x06\x26\x18\x5a\x95\x42\xec\x02\xb2\x30\xd8\x16\xfb\x86\xb9\xa2\xcb\xe1\x48\xce\x7b\xb8\x68\x4f\x81\x91\xa9\xfb\x8e\xca\x6f\x0b\x2c\xb5\x74\xaf\x70\x09\x76\x83\xd4\x94\x21\x06\x13\x26\x5f\x64\xfa\x26\x1e\x82\x73\xf0\xf9\x93\xe7\xfa\x4b\x55\x91\x17\xce\xd1\x58\x69\xb4\x7a\xe9\x29\x38\xd2\x46\x31\x67\x92\xad\x51\x7f\xe5\x26\x96\xe9\x78\x3c\x8e\x67\xd3\xf1\x78\x9c\x00\x8c\xc7\x44\xd5\xd4\xff\x1b\xe0\x0a\xaa\xea\x3f\x8a\x4b\x98\x44\x29\x03\x17\x97\x14\xb5\x97\xa4\x14\x75\x4a\xd2\xc7\x46\x7a\x80\x4f\x3d\x03\x9d\xb8\x32\xa8\x5f\x51\x43\x1e\x9d\x4d\xaa\xca\x62\x5e\x08\x66\x3b\x82\x9b\x9c\x41\xed\x81\x7b\x0a\x50\x37\x4a\xae\xf8\xfa\x30\x17\x8a\xcb\x70\x6c\x02\x77\xad\xec\xd6\xf4\x85\x69\x3a\x1d\x8f\xa1\x35\x5a\xfd\x97\x59\x48\x77\x93\x65\x2f\x42\x95\x5f\xa7\x98\x4a\x3d\x70\xd8\x24\xdd\x97\x58\x9d\xee\xd9\x3e\xdb\xc7\xc9\x1e\x46\xc8\x91\xcc\xdd\x5b\x2a\xca\x0c\x87\x91\x16\xc2\xe9\x1e\xb9\x85\xff\xee\x2f\x95\x6b\x65\xeb\xe0\xfd\xea\xa5\xd1\x67\x30\x83\x95\xd2\x54\xee\xb4\x88\x0d\xc0\x0a\xec\xd2\xc4\x7f\xe3\xa6\xe7\x16\x6c\xdd\x80\x76\xc3\xa9\xcf\xb8\x1c\x19\x30\x5e\x1d\x16\xe7\xd7\xd7\xc3\x08\xfb\xc1\xea\xcb\xb3\x15\xee\x3e\xd6\xd4\xd7\x47\xa9\x99\x9f\x35\x56\xf9\x60\x0f\x1c\x80\x15\xe3\x02\xb3\x3f\x25\x87\x8a\x1b\x66\x60\x89\x28\x1b\x0b\x91\xac\x8f\x3a\xdf\xbf\x06\xfe\xaa\xef\x1d\x73\xee\xd8\x19\xaa\xa8\x9e\x26\x6b\x82\x64\x4b\x81\x87\xe9\x9a\x26\x57\xfb\x69\x12\x90\x07\x0d\x92\x83\x52\x8e\xc3\x2d\x9e\x81\x9f\x46\x71\xc4\xed\x8d\xc7\xaf\x83\x47\x55\x94\x1f\x36\xaa\x30\x42\x6b\x0f\xfd\x4b\xbd\x37\x2b\xad\x7a\x64\x9a\xe5\xe6\x2b\xee\x57\xd1\xdb\xa3\xad\xaf\x49\xae\x97\x7d\x0f\x49\x56\x5e\x0c\x5b\xe3\x79\xb0\x38\x7f\x1a\xa8\x7f\x94\xc6\x82\x44\xcc\x68\x37\xdb\x01\xbd\x82\x3e\x7f\x8a\xa3\xe8\xcb\x29\x1c\xef\x6d\xb4\x32\x10\x93\xb2\xd0\x00\xce\x09\xd0\x87\xe6\xb1\x88\xc3\x6e\x1c\xd2\x1c\x08\xf2\x64\x99\x2d\x4d\x03\x13\x7e\x42\x4e\x68\x4b\x84\x51\xd8\x3c\x47\xa0\x34\x8c\x98\x10\xa3\x4e\xc8\xa0\x38\x10\xf4\x5e\x5a\xd4\xaf\x4c\xb4\x26\xca\x69\xab\xb5\xe0\x40\xbb\xe7\x9e\x06\x9f\xc3\x2b\xe0\x4b\x13\x1f\x03\x59\xe6\x4b\xd4\x9d\x0e\x04\x8b\x1f\x82\xef\x7b\x1c\xfd\x4e\x9c\xdf\xf0\x8c\x66\x59\x46\xab\x2f\xd9\x04\xcb\xcc\xcf\xe4\x81\x2a\xda\xcf\xb7\x32\x3f\xb5\x94\x2f\x2e\xfd\xda\x4e\xd6\x3a\x5e\xa3\x75\xbf\xec\x52\x81\xcf\x3c\xc7\xb3\x29\x6e\x24\x87\x16\xcf\xdd\x9b\x45\x99\x0d\xb2\x3d\x5b\x59\xd4\x24\x39\xd4\x74\x6d\xb0\x26\x85\x08\x0a\x97\x53\x5b\xef\x44\x17\xbd\xbb\x62\xe2\xf3\xe6\x3d\xbf\x07\x97\x45\x3f\x81\xd1\xe2\xed\xfc\x43\x36\x93\x54\xf0\xf4\x27\x68\xa4\x4d\x5a\x49\x98\x32\xad\xd5\xd6\xfc\x48\x29\x95\xa8\x53\xa1\xd2\x9f\x5b\x6e\x70\x4a\xd9\xd7\xb8\xd2\x68\x36\x61\x3f\xf0\xa6\xb8\x5c\xa9\x23\x13\xc6\xaa\xe2\xc7\xb2\xb4\x56\x49\xaf\x46\xbf\x81\x86\xaa\x0e\x8b\xbe\x57\x7f\xa6\xea\xe9\x8b\x87\x04\x1e\x62\xe5\x86\x17\xc2\xfe\xd2\xf8\x7e\xe6\xc5\xae\x4b\x09\x3e\x5e\x7a\xa6\x91\xa3\xb4\xf5\xfb\x24\x73\xbc\xbf\x75\xee\xb2\x15\x42\x70\x2a\x83\xe5\x0e\xae\x95\x4d\xae\xeb\xff\x3a\x09\xc8\xd3\xae\xd7\x66\xf2\x22\xfd\x05\xac\x73\xcc\xa0\x25\xdb\x3a\x3e\xa9\xd6\x3b\xe5\x4c\x08\x34\xbe\xa2\x9e\xf7\x34\x9b\xda\xcd\x96\xfe\xff\x03\x00\x00\xff\xff\x9f\xc0\x03\xee\xf0\x14\x00\x00")

func templatesCmdmsgsTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesCmdmsgsTmpl,
		"templates/cmdmsgs.tmpl",
	)
}

func templatesCmdmsgsTmpl() (*asset, error) {
	bytes, err := templatesCmdmsgsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/cmdmsgs.tmpl", size: 5360, mode: os.FileMode(420), modTime: time.Unix(1540045556, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb0, 0xb9, 0x61, 0xb0, 0x3c, 0x7c, 0xde, 0x40, 0x57, 0xb8, 0xe7, 0x7e, 0xa8, 0xa1, 0xe2, 0xca, 0x2a, 0x7d, 0xed, 0x5d, 0x14, 0x64, 0xd, 0x18, 0xfc, 0x33, 0xc8, 0x5f, 0x9e, 0x3d, 0x4e, 0x2a}}
	return a, nil
}

var _templatesCmdusagesTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x57\xdb\x6e\xdb\x46\x10\x7d\xd7\x57\x0c\x5c\x04\x6e\x09\x8b\x70\x90\x97\x42\x50\x84\x38\x41\x8a\x18\xa8\x1b\xa3\xb9\x27\x2d\xc0\x15\x39\x94\x16\xdd\x0b\xbb\xbb\x94\x6d\x30\xfa\xf7\x62\xc8\xa5\xc4\x25\x4d\xc9\x0f\x4e\xfd\x24\xef\x65\xe6\xcc\xcc\x99\x33\xcb\xaa\xca\x30\xe7\x0a\xe1\x44\x32\xae\x4e\xb6\xdb\xaa\x42\x95\x6d\xb7\x93\xc9\x7e\xa7\xb4\x6c\x85\x27\x30\xdd\x6e\x27\x55\x15\x7f\xb0\x68\xae\x50\x39\xae\xd5\x76\x0b\x55\x15\xbf\x92\xd9\x1f\x4c\xe2\x76\x0b\xa9\x96\x92\xa9\x0c\xea\x0b\xb3\xaa\x3a\xf9\x8b\x2c\x4e\xaa\x6a\x0a\x03\xa3\x05\xc7\x0f\x5d\xbb\x3c\x87\xf8\xd2\xbe\x5b\xeb\x9b\x7a\xf9\x0d\x57\x8e\xc0\x38\x94\x85\x60\x6e\x8f\x22\x06\x8f\xb1\xbe\x17\x45\x51\x55\xc5\xd7\x06\x73\x7e\xbb\xdd\x16\x1c\xe1\xdb\x0b\x83\x29\xf2\x0d\x9a\x38\x8e\xff\x86\x39\x93\xba\x54\x6e\x11\x45\xd1\x04\x40\x72\xc5\x65\x29\xa1\x59\x9c\xd1\x55\x8e\x57\xdc\x07\xf2\xee\x4e\x2e\xb5\x18\x03\xbc\x64\xa2\x03\x38\x74\xbc\x64\xa2\x71\xb0\x42\x07\x4b\x26\x98\x4a\xd1\x3b\xb9\xdf\x58\x86\x85\xb6\xdc\x8d\x1a\xf4\xfb\x7b\xa3\x7e\x01\x58\x96\x19\xb4\xf6\x7e\xab\x37\xdc\xad\x33\xc3\x6e\x1e\x3d\xb1\xad\x61\x98\x7b\xff\x8b\xa3\x89\xfd\xe4\xaf\x0c\xb3\x0b\xe0\x6e\x73\x24\x7e\x14\x86\x2b\x97\xc3\xc9\x93\xd5\x93\x27\x27\x10\xbf\xbf\xfd\x0d\xf1\x1a\x4d\x8a\x04\x11\x74\xbe\x73\x02\xda\xec\x5c\x54\x55\x73\xf0\x81\x65\x4b\xd7\x4c\x29\x14\x8f\x9e\x12\x6f\xb7\xce\xc8\x77\x83\x52\x6f\x70\x01\xf3\x9f\xfc\x72\x1c\xc7\x3e\x33\x2c\xcb\x08\x7d\x73\x02\x58\xea\xf8\x06\xa1\xbd\x9c\x6b\x03\x49\x27\x84\xe4\xd4\xb6\x4d\x34\x52\xe2\x35\x8a\xe2\xc3\x81\x7e\xbc\xd3\x25\xa4\x4c\x41\x69\x11\xdc\x1a\x2d\xee\xec\x0d\x9d\x4d\xba\x21\xef\xfb\x31\xae\xed\xee\x77\xf6\xc4\xef\xef\x84\x2c\xee\xef\xf6\xd8\x48\xc9\xdc\xe5\xfe\x8a\x29\xb6\x42\xe3\x63\xd8\xdf\x09\xab\x15\xdf\xd7\xe1\x17\xa5\xd3\x30\xb5\x30\xd7\x4a\x70\x85\xdf\x99\x10\x0b\x98\x72\x98\x73\xe5\xd0\x6c\x18\xfd\xc7\xf6\xcc\x99\xa6\x30\x4f\xef\x52\x81\xef\xb9\x44\xbb\x80\x29\xc2\x9c\xe5\x0e\x8d\xe3\xb2\x5b\xb1\x05\xcc\x5f\x18\x2d\xd0\x97\x8d\xf2\x97\x0c\x1d\x27\xb0\xd2\x75\x3f\x4a\x6d\x10\xb8\xca\xb5\x91\x8c\x52\xdf\x2d\x57\x1b\xe4\x47\x5e\xbc\x55\x75\x88\xd3\xce\x5f\x10\xef\x86\x17\x41\xf6\xf6\x26\xee\x97\xcc\x2b\xc6\x95\xcf\xdd\xa3\x30\xba\xaa\xe2\x97\xda\x75\xf5\x53\xfa\xca\x84\xbc\x7e\x51\x5a\x34\xdf\xdb\x04\x0d\x68\xdd\x5e\x22\x8a\x5d\x73\x7c\xa9\x47\x64\xcf\x47\xd0\xf8\xfb\x41\x01\x14\xf5\x6f\x98\xdb\x9a\xe6\x0b\x98\x37\x0b\x0d\xec\x54\xab\x9c\xaf\x76\x9b\xa7\xbb\x91\xd5\x1c\x9a\x40\xd0\x40\xc9\xd0\xba\xe0\xd6\x25\xe0\x1a\x12\x34\xd6\x4a\xc3\x96\x02\xa1\x31\x39\xd2\xb6\x3e\xf0\x4b\x95\xeb\x40\xf3\x87\x0e\x88\x53\x35\x54\xbb\xd6\x37\x60\xd1\x6c\xd0\xb4\xb0\x69\xef\xa0\xfd\xdf\xb9\x75\x47\xec\x53\x00\xb5\x7d\xfa\x01\x4c\x88\x30\x8a\x54\x73\x75\x6a\x29\x98\x63\xb1\xbc\xbe\x4d\x45\x99\x3d\xce\x10\x1f\xc2\xc4\xc6\x7a\x48\xc3\x6f\x35\x01\x69\xae\xdf\xc3\xc1\xee\x2d\x3a\x76\x18\xfd\x9b\x23\x3a\xfa\x65\x54\x47\x67\x7d\xd9\xec\x15\xb6\x2f\x83\xc3\xd2\x8c\x9c\x08\xba\x62\xe4\x4c\xd8\xfb\x23\x87\xc2\xca\xc4\x07\xe4\x84\x24\xed\x9a\x19\x26\xdf\x39\xe6\x4a\x1b\x50\xa7\x27\xb1\xb3\x28\x82\xb7\x4a\xdc\x51\x7f\x13\xff\x9b\x2d\x28\x50\x17\x02\x2d\xd5\x81\xb8\xd4\xfe\x9b\xe8\x82\x12\x39\xcb\x30\x67\xa5\x70\xfe\x74\x72\x1c\xc8\xa5\x17\xf1\x10\x4a\x57\xdd\x09\xc8\xfc\xf3\xfa\x8b\xfc\x6a\x17\x3f\x7f\x86\xb5\x2e\x0d\x7c\xa1\xd7\x41\xe9\x10\xbe\x82\xc5\x54\xab\x0c\x7e\x01\x6a\x1f\xa1\xd5\x0a\x48\xe8\x09\x31\x01\xd7\x2a\xc5\x33\x48\x64\x69\x1d\x2c\xe0\xe9\xaf\xe7\xf6\xac\x87\x94\xd6\x92\x09\x00\xc0\xeb\x5b\x26\x0b\x81\x33\x48\x9e\xae\x13\xe0\x16\xb4\xc2\xda\xdd\x19\xad\x3c\x3b\x97\x7e\xb1\x81\x40\x22\xf2\xec\xdc\xe3\x18\xe7\xde\x2e\xd0\x8b\x7a\x3e\x85\x61\xfa\xb1\x45\x8f\xaa\x19\x24\x57\x04\x72\x89\xc0\x40\x95\x72\x89\x06\x16\xcf\x61\xe4\xc5\x9a\x00\x44\x51\x94\x18\xfc\xb7\x34\x1c\xb3\x84\x66\xd8\x51\x04\xaf\x76\x53\x31\x44\x11\x0e\x4c\x4a\xf7\x1b\x7d\x43\x12\x7f\x57\xa7\xd2\x52\x2e\xeb\x21\x7c\xcd\x77\xb9\x0c\x60\xc2\xf9\x19\xf4\xb3\x7a\xfe\x80\xda\x5f\xd0\x58\x26\xaf\x21\x9e\x60\x60\xb7\x70\x82\xca\xb6\x68\xa0\x3e\x07\xa9\x41\x6a\x07\xc7\xec\x3f\x67\x60\x99\x44\x60\x76\x4f\xa0\x66\xee\x2f\x4b\xd7\xd2\xe0\x39\xd5\xad\xa1\x8d\x1d\x00\x7f\x46\x6c\x38\x9e\xca\xc1\x23\x33\x8a\xf6\x2f\x0b\xc2\xfc\x69\xcd\xd3\x75\xfb\xee\x3b\xb5\xbe\x51\x6a\x89\xa1\x49\x52\xd4\xa9\xec\xf9\x4e\x4b\x63\x50\xb9\xf6\x56\x52\xd7\xf8\x32\x87\x9c\x0b\x01\xdc\xc1\x2e\xf3\x8e\x24\x8a\x10\xd2\x9b\x99\x7e\xb6\x53\xad\x6e\xba\x07\x91\xe1\x4f\x2d\xc2\xb4\xfb\xd7\x50\x83\x5d\x13\xd3\xc9\xb0\x5f\xed\xe2\xae\x51\xf5\x90\x93\x14\xd0\xc1\x33\xb8\x7a\x1c\x8c\x3f\xe2\x53\xf1\xff\x79\x48\x5e\xd0\x90\x52\x08\x8c\xbc\x51\xba\x88\x96\x13\x80\x9e\x6e\xdf\xaf\xc4\x71\xfd\xb9\x34\x76\xb4\xa7\x95\x87\x0f\x07\x7a\x73\xf8\xe8\x40\x18\x8e\x58\xee\xb5\xed\x11\xe3\x83\x17\xfe\xf8\xd9\x0e\x29\x47\xa7\xd8\xfe\x05\x3d\x2c\xf2\x86\x17\x4d\x11\x88\x2b\x34\xca\xcd\xa9\x0d\x3f\x81\xe0\xe3\xe5\x35\x14\x9a\x2b\xd7\x95\xec\xff\x02\x00\x00\xff\xff\x98\xe2\x6f\x6a\x15\x11\x00\x00")

func templatesCmdusagesTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesCmdusagesTmpl,
		"templates/cmdusages.tmpl",
	)
}

func templatesCmdusagesTmpl() (*asset, error) {
	bytes, err := templatesCmdusagesTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/cmdusages.tmpl", size: 4373, mode: os.FileMode(420), modTime: time.Unix(1539800543, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x88, 0xf5, 0xb1, 0xcb, 0x2e, 0xe3, 0xe8, 0x29, 0x35, 0x79, 0x7f, 0x90, 0xd5, 0x65, 0x8d, 0x95, 0x1e, 0x9b, 0x22, 0x84, 0x5a, 0xd7, 0x64, 0x3, 0x16, 0x93, 0x60, 0x21, 0xeb, 0x49, 0x70, 0x90}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/cmdmsgs.tmpl": templatesCmdmsgsTmpl,

	"templates/cmdusages.tmpl": templatesCmdusagesTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"cmdmsgs.tmpl":   &bintree{templatesCmdmsgsTmpl, map[string]*bintree{}},
		"cmdusages.tmpl": &bintree{templatesCmdusagesTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
