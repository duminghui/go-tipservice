// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/cmdmsgs.tmpl (4.476kB)
// templates/cmdusages.tmpl (3.37kB)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesCmdmsgsTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x57\xdd\x6e\xe3\x36\x13\xbd\xd7\x53\x4c\xbc\x17\xf9\x3e\x23\x31\xf6\xda\x08\x0c\x78\xb3\x29\xba\xc0\x3a\x0d\xf2\xd3\xa2\x77\xa6\xc5\xb1\xcd\x96\x22\x55\x92\x8a\x6d\x08\xec\xb3\x17\xfc\x91\x2c\xd9\x96\xe2\x6d\x52\xe4\x26\xa6\x86\x3c\x33\x67\xce\x1c\x51\x65\x49\x71\xc9\x04\xc2\x60\x43\x38\x47\x33\x23\x4c\x18\x14\x44\xa4\x38\x80\x6b\x6b\x93\xb2\x1c\x59\x0b\xbf\xf9\x87\x90\xed\x9f\x26\x65\x79\x0d\x28\xa8\xb5\x49\xd2\x38\x84\x99\x35\x55\x64\x33\x63\x62\x9a\xc9\x42\x98\x3b\xa5\xea\x73\x5e\x34\xaa\x19\x0a\xc3\xa4\xb0\x16\xaa\x50\xc8\x98\x60\x59\x91\x01\xf1\x1b\x80\x69\x98\x97\xe5\x68\xc6\x5c\x50\x59\x8e\x9e\x76\xd9\x42\x72\x6b\xe7\xfd\x88\xbf\x12\xce\x28\x31\x38\xa5\x54\x75\x83\xba\x93\x5d\x84\xb5\x73\x07\x24\xa4\x69\x42\x5c\x6a\x20\x94\x2a\xd4\xba\x1f\xeb\x8b\x34\x3f\x04\xc3\x04\x2c\xa4\xb9\xd4\x10\x38\xbe\x82\x9d\x2c\x20\x25\x02\x0a\x8d\x3e\xf6\x41\xe1\x92\x6d\xad\xcd\x19\xce\x21\x95\x59\x46\x04\x05\x23\x61\xc5\x5e\x11\xb4\xcc\x50\x0a\x6c\x26\xda\x9f\x5e\x60\xfe\x5e\x9a\x3b\x21\x8b\xd5\xba\x3b\x4d\x97\x06\x95\xe2\xd2\xc0\x9a\xbc\x22\xa0\x90\x85\x59\x57\x7d\x30\xb2\x6e\x51\x3f\xdc\x53\x91\xa6\xa8\x75\x0f\x46\xdd\x6a\x47\x8b\x3f\xbd\xdd\x5a\x87\xd5\xa0\x2c\x31\xdb\x25\xe2\xd8\x45\x3c\x6f\x7f\x42\x6c\x07\x27\x7e\xf9\x6e\x9b\xbf\x28\x6e\xad\xff\xf1\xed\xab\xb5\xc9\xbd\xdc\x38\x30\x05\x0b\xc2\x9d\x40\xc7\xa7\xb3\x5e\x10\x1e\x52\x68\xca\xfb\xf7\xb7\xf7\x51\xcc\xa5\x66\xe6\x9b\x58\xca\x8e\x4a\xfd\x21\x6d\x35\xc5\x4d\x95\xaa\x80\xe9\x71\xd2\x2c\xf4\x24\x52\xce\x30\x64\x38\x63\xa2\xbb\x77\xb3\xf6\xd4\x9c\x1e\x19\x20\x9c\xcb\x0d\x7a\x2d\x2d\x10\x28\xd3\x46\xb1\x45\x61\x3a\xa6\x37\x67\x58\xab\xe6\xad\xf1\x3d\xa1\x9d\x55\x53\x3b\x0d\xac\x9c\x23\xd1\xe8\xc5\x5e\x69\xbb\x29\xfa\x48\xd2\xdc\x0b\x1e\xcd\x21\x69\x3d\xa9\x3e\xa0\xcc\x39\x36\x73\xb4\x16\xee\x25\xe4\x7e\xfd\xa8\x68\xc8\x19\x5e\xc1\xb3\xda\x01\x59\x11\x26\x60\xb3\x46\x51\xc5\x12\x85\x20\x05\x67\xe2\x0c\x6a\xee\x48\xda\x33\x54\x8e\x7f\x14\xf4\xa4\xce\xa3\xe5\x44\xb2\x5a\x2c\xb9\xb8\x47\x4c\x91\xbd\xa2\xba\x8d\x5b\x43\x6e\xdd\x0c\x38\x1c\x1f\xfb\x33\x6b\xe8\xf9\x48\x95\xae\xee\xbe\xd1\xfb\x37\xc8\xcd\x99\x1f\x73\xc9\x39\xcb\x65\x3e\x86\xbf\x0f\xfe\xca\x72\x74\x2b\x99\xb8\x27\x99\x9b\x62\x97\xc7\x41\xc4\x38\x25\x82\xee\xdc\xcc\xc5\xf4\x1c\xb9\x47\x29\x96\xa5\x22\x62\x85\x50\xe7\xa9\x43\x88\x9b\x7f\x9f\x5e\x59\xb2\x25\x8c\x9e\xd6\x72\x33\xe5\x3c\xc8\xc2\x5a\xf8\x1f\xe1\xbc\xa7\xba\xff\xc7\xcd\xa7\xab\x4c\xd7\x44\x08\xe4\xbf\xe4\xa8\x88\x91\xaa\xc7\xe5\xe2\x12\x5b\x02\xfe\x05\xa3\x6a\x03\x0c\x08\xa5\x55\xf8\x00\x06\xd6\x4e\x29\x45\x0a\x3a\x1c\xb4\x2c\x38\xdf\x05\x64\xae\xb1\x19\xf6\x88\x99\x74\xb6\x7f\x14\xe7\x33\x9c\x37\xe7\xfb\x52\x57\x13\xe5\x84\xb5\x01\x92\x1a\xf7\xc6\x60\x02\xcc\x1a\xdd\xb8\x85\x1a\x74\xf0\xb4\xc8\xe1\x6d\x5c\x04\x6b\xe1\xe6\x93\x67\x71\x52\x96\x2e\x0b\x6b\x9d\x61\xd4\xbb\x7a\xe9\xc9\x19\xba\xbb\xc2\x8c\x08\xb2\x42\xf5\x9d\xe9\x28\xc0\xe1\x70\x18\xd7\xc6\xc3\xe1\x30\x01\x18\x0e\x1d\x55\x63\xff\x3f\xc0\x35\x94\xe5\x1f\x92\x09\x18\xc5\x28\x0d\x83\x2b\x57\xb5\x8f\x7c\x94\x1c\x3b\x23\xdd\xc3\x3a\xfa\x8c\x9c\x7a\xac\xda\x71\xa5\x51\xbd\xa2\x82\x2c\x26\x9b\x94\xa5\xc1\x2c\xe7\xc4\x74\x14\x37\x7a\x03\xb5\x07\xee\x29\x40\xdd\x4a\xb1\x64\xab\x76\x2f\x24\x13\x61\x59\x07\xee\x1a\xdd\xad\xe8\x0b\x3e\x39\x1e\x0e\xa1\x61\x9a\xfe\xc9\x34\xb4\xbb\xee\xb2\x0f\x71\x83\x50\xb5\xd8\x0d\x46\xe0\xb0\x6e\xba\x97\x58\xd5\xee\xe9\xbe\xdb\xc7\xcd\x3e\x8f\x90\xa3\x98\xbb\x6d\xca\x0b\x8a\xe7\x91\x16\xca\xe9\x36\xd3\xdc\x3f\xf7\xaf\x8b\x2f\xd2\x54\xc5\xfb\x4b\x95\x42\xdf\x41\x0a\x4b\xa9\x9c\xdc\xdd\x15\xeb\x0c\xac\xc0\xae\xf3\xf2\x2d\xd3\x3d\xef\xb7\xc6\xbb\xcd\xac\x99\x9b\x33\x26\x2e\x35\x68\xbf\x1d\xe6\x6f\x5f\x4c\xdb\x15\xf6\x83\x55\xaf\xc5\x46\xb9\xfb\x5a\x53\xaf\x8f\x42\x11\xef\x35\x46\xfa\x62\x5b\x09\xc0\x92\x30\x8e\xf4\x22\x69\x6f\x5c\x13\x0d\x0b\x44\x51\x9f\x10\xc9\xfa\xd1\xe4\xfb\x2f\x78\xef\xcd\xbd\xc3\xe7\x8e\x93\x71\x8a\xea\x19\xb2\xba\x48\xb2\xe0\xd8\x6e\xd7\x38\xb9\xde\xbb\x49\x40\x3e\xcb\x48\x5a\x52\x8e\xe6\x16\xd7\xc0\xbb\x51\xb4\xb8\xfd\xe1\xf1\xe9\xd9\x56\x15\xe3\xcf\xb3\x2a\x8c\xd0\xca\x43\xbf\x6b\xf6\xa6\x85\x91\x53\x4a\x1f\x88\x22\x99\xfe\x8e\xfb\x7b\xe6\xd7\xa3\x2b\x5d\xdd\x5f\x1f\x7b\x71\x71\x88\x1b\x8f\x7a\xd1\x64\x85\x67\x81\x46\x2b\xaa\x21\x67\x85\x8e\x88\xee\x2b\xe7\xe6\x53\x34\xa4\xc9\x07\x40\xb9\x3e\x74\xe1\x38\x16\x3f\x02\xe3\xc9\x10\x53\xe8\x36\xca\x02\xe1\x26\xdc\x26\x27\x20\x15\xdc\x10\xce\x27\xf0\x01\x58\xcf\x2c\xc3\x23\x24\x77\xaf\x5e\x5f\x65\x57\xda\x5f\x28\xc3\x1e\xc3\x32\xfc\x00\xbc\x83\x8f\x80\x9b\x70\xbd\x9f\x40\x16\xa1\x09\x88\x22\x5b\xa0\x82\x09\x7c\x1e\x7d\x7e\xbf\x32\x76\x29\xc7\x56\x8d\xff\x35\x62\x0d\xf4\x10\x96\xdc\x47\x47\x74\xd3\xe6\xd6\xd3\x8d\x3f\xb0\xc5\x78\xd9\x76\x27\x54\xa7\x19\xa2\xff\x6c\x19\x5c\xeb\xe3\xf2\x9f\x00\x00\x00\xff\xff\x7a\x34\x20\x96\x7c\x11\x00\x00")

func templatesCmdmsgsTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesCmdmsgsTmpl,
		"templates/cmdmsgs.tmpl",
	)
}

func templatesCmdmsgsTmpl() (*asset, error) {
	bytes, err := templatesCmdmsgsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/cmdmsgs.tmpl", size: 4476, mode: os.FileMode(420), modTime: time.Unix(1539371169, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb2, 0xcb, 0xed, 0x51, 0x7a, 0x20, 0x27, 0x1e, 0x1c, 0x48, 0x68, 0xdb, 0x7b, 0xb, 0x4e, 0x5e, 0xc2, 0x1e, 0x5d, 0x6b, 0x57, 0x29, 0xa8, 0xd9, 0x97, 0xe4, 0xc, 0x5e, 0xf2, 0x9b, 0x91, 0x1c}}
	return a, nil
}

var _templatesCmdusagesTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x6d\x6b\xe3\x46\x10\xfe\xee\x5f\x31\xb8\x84\xb4\x26\x16\x0e\x07\xa5\x18\xd7\xe4\xae\x5c\xc9\x41\xd3\x06\xee\xc2\x5d\xee\x5a\xf0\x5a\x1a\x59\x4b\xf7\x45\xec\xae\xf2\xc2\x46\xff\xbd\x8c\x76\x65\x59\xb2\x9d\xdc\x87\xf4\x9b\xbd\x3b\xf3\xcc\x3c\x33\xcf\xcc\xca\xfb\x0c\x73\xae\x10\xc6\x92\x71\x35\xae\x6b\xef\x51\x65\x75\x3d\x1a\x75\x37\x95\x65\x1b\x1c\xc3\xb4\xae\x47\xde\x27\x37\x16\xcd\x15\x2a\xc7\xb5\xaa\x6b\xf0\x3e\xf9\x4d\x66\x7f\x32\x89\x75\x0d\xa9\x96\x92\xa9\x0c\x1a\x87\xb9\xf7\xe3\xbf\x09\x71\xe4\xfd\x14\xf6\x40\x4b\x8e\x37\xbb\xb8\x3c\x87\xe4\x83\xfd\x58\xe8\xfb\xe6\xf8\x92\x2b\x47\xc9\x38\x94\xa5\x60\xae\xcb\x22\x81\x98\x63\xe3\x37\x99\x4c\xbc\x4f\xae\x0d\xe6\xfc\xa1\xae\x4b\x8e\xf0\xed\xc2\x60\x8a\xfc\x0e\x4d\x92\x24\xff\xc0\x82\x49\x5d\x29\xb7\x9c\x4c\x26\x23\x00\x32\xf0\x3e\xf9\xf8\x28\xd7\x5a\xd4\x35\x38\x0d\xad\xb5\x1d\x01\x48\xae\xb8\xac\x24\x04\x9f\x39\x21\x73\xbc\xe2\x91\x67\xeb\x75\x98\xcf\x9a\x89\x1d\x3e\xfd\xbc\xd6\x4c\x84\xf8\x1b\x74\xb0\x66\x82\xa9\x14\x63\x90\xc3\x60\x19\x96\xda\x72\x77\x14\x30\xde\x77\xa0\xf1\x00\x58\x96\x19\xb4\xf6\x30\xea\x3d\x77\x45\x66\xd8\xfd\xab\xd7\xbd\x05\x86\x45\x8c\xbf\x1c\xd4\x7d\xbf\xb0\x9f\xa3\xcb\x7e\x75\x01\xdc\x43\x8e\x24\x9f\xd2\x70\xe5\x72\x18\x9f\x6c\x4e\x4e\xc6\x90\x7c\x7a\xf8\x1d\xf1\x1a\x4d\x8a\x94\x22\xe8\x7c\x1b\x04\xb4\xd9\x86\xf0\x3e\x18\x7e\x67\xdb\xd2\x82\x29\x85\xe2\xd5\x4b\x12\x71\x9b\x8a\x3c\x19\x94\xfa\x0e\x97\xb0\xf8\x21\x1e\x27\x49\x12\x2b\xc3\xb2\x8c\xb2\x0f\x16\xc0\x52\xc7\xef\x10\x5a\xe7\x5c\x1b\x58\xed\x50\x58\x9d\xda\x76\xc6\x8e\xb4\xb8\x40\x51\xde\x3c\x33\xae\x8f\xba\x82\x94\x29\xa8\x2c\x82\x2b\xd0\xe2\x16\x6f\x3f\xd8\x68\x97\x72\x37\xae\x49\x83\xdb\xdd\x74\xc2\x1f\xde\xf4\x55\x3c\xbc\x1d\xa8\x91\x8a\xd9\x70\x0a\xd5\xbf\x62\x8a\x6d\xd0\x50\x81\xc3\x16\xd9\x75\xed\x37\x2d\xe9\x96\xd6\x77\xfa\x97\x1c\xdf\x56\x4e\xbf\xcd\xb2\xc3\x10\x87\x96\xd5\x15\xe3\x2a\x82\xbe\x8a\x58\xbc\x4f\xde\x69\xb7\xbb\xb9\x64\x40\x1f\x48\xe6\xa2\xb2\x68\x9e\x2e\x8c\x16\xb8\x3c\xa0\x98\xd6\x89\xba\x77\xcd\xf1\x9d\x3e\xb2\x51\x22\x83\x10\xef\x7f\x22\x50\x36\xbf\x61\x61\x1b\x05\x2d\x61\x11\x0e\x42\xda\xa9\x56\x39\xdf\x6c\x2f\x4f\xb7\x8f\x45\x30\x1a\x41\x4f\x9b\xab\x7d\x74\xc1\xad\x5b\xd1\xc6\xa6\x7d\x17\xd0\x2a\xc3\xd6\x02\x21\x40\x1e\x99\x88\x48\xfc\x83\xca\x75\x6f\x9d\xee\x07\xe0\x2a\xd7\x4d\xaa\xb6\xd0\xf7\x60\xd1\xdc\xa1\x69\xd3\xa6\xbb\x67\xf1\xff\xe0\xd6\xbd\x80\x4f\x04\x1a\x7c\xfa\x01\x4c\x88\x3e\x8b\x54\x73\x75\x6a\x89\xcc\x4b\x5c\xde\x3f\xa4\xa2\xca\x5e\xe7\xf9\xdc\x4f\x13\x03\x7a\x5f\x86\xdf\x1a\x01\xd2\x8b\x7a\x40\x83\xbb\x5e\x64\xf6\x7c\xf6\x97\x2f\xac\xa8\xdb\xa3\x2b\x6a\x3e\xdc\x48\x83\xc6\x0e\x37\xcc\x7e\x6b\x8e\x58\xf4\xa6\xe2\x88\x4d\x7f\xf6\x8f\x18\xf5\x3b\x93\x3c\xb3\x4e\xfa\xfb\xe7\x55\x3f\x81\x22\x34\x4c\xd3\xee\xc1\x59\xc2\xd4\xc0\x22\x6c\x11\x98\x6a\x58\x68\x25\xb8\xc2\x27\x26\xe8\x8a\xc3\x82\x2b\x87\xe6\x8e\x09\xc7\x25\x59\xb0\xee\x6d\x25\x98\xf4\x31\x15\xf8\x89\x4b\xb4\x4b\x98\x92\x34\x72\x87\xa6\x31\x0d\xaf\x18\x85\x63\x95\xd3\x8d\x14\x1c\xb3\xff\x8e\x00\x26\x93\x5e\x02\xf3\xc9\x04\x3e\x17\x3c\x2d\xda\xd7\xed\xd4\x42\x89\xba\x24\xe5\x33\xd5\x0c\x75\xc9\xf1\x0c\x56\xae\xe0\x16\x72\xc1\x36\xcd\x39\xdf\x28\x6d\xf0\x0c\x32\xcc\x59\x25\x1c\xa4\x95\x31\xa8\x5c\x0b\xb2\x0a\x81\xb6\xdc\x42\x14\x0d\xdc\x92\x76\xb6\x8c\x77\x22\x04\x87\x7e\x05\xc8\xeb\x2f\x25\x1e\x69\x83\xd2\x86\x09\x57\x31\x3d\x4b\x4a\xa7\x69\x6d\xff\xae\xda\x5c\x82\x59\x4c\x61\x58\x43\xc2\x5c\x7c\x29\x6e\xe5\x57\xbb\xfc\xf1\x0b\x14\xba\x32\x70\x4b\x5f\x29\x95\x43\xf8\x0a\x16\x53\xad\x32\xf8\x09\x68\xd7\x08\xad\x36\x40\x5e\x14\x9c\x72\xd0\x2a\xa5\x52\xc8\xca\x3a\x58\xc2\xf9\x2f\x33\xbb\x2d\x00\xfd\xa1\x90\x00\xef\x1f\x98\x2c\x05\xce\x61\x75\x5e\xac\x88\xb1\x56\xd8\xc4\x39\xa3\x93\x37\x33\x19\x0f\x43\x6c\x5a\xb5\x6f\x66\x31\x01\x1b\x72\x8e\x5d\xa6\xaf\xb4\x39\x5c\x51\xb0\x35\x02\x03\x55\xc9\x35\x1a\x58\xc2\x91\x0f\xe0\xae\x02\x3b\x06\xab\x6d\xcb\x77\xc4\x42\x45\xb8\xd4\xf7\xf4\x4a\x3d\x36\x04\x2d\x31\x24\x81\x12\xcd\x96\x61\x3f\xe8\xac\x6b\xf6\xf9\x2c\xa2\xf6\x24\xd7\x82\xf6\xaa\xd6\x62\x42\x63\x07\xa9\x41\x9a\x18\x92\xe2\x19\x58\x26\x11\x98\x1d\x8a\x7c\x5d\xb9\xb6\xc4\xbf\xc2\x2c\x76\xc4\x76\xd1\x7f\xa6\x42\x77\xf3\xfb\x5f\x00\x00\x00\xff\xff\xcc\xe8\x2e\x35\x2a\x0d\x00\x00")

func templatesCmdusagesTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesCmdusagesTmpl,
		"templates/cmdusages.tmpl",
	)
}

func templatesCmdusagesTmpl() (*asset, error) {
	bytes, err := templatesCmdusagesTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/cmdusages.tmpl", size: 3370, mode: os.FileMode(420), modTime: time.Unix(1539365823, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd2, 0x2c, 0xa1, 0x18, 0x5c, 0x18, 0x6, 0x56, 0x0, 0x78, 0xa, 0x8b, 0x33, 0x12, 0x92, 0xde, 0x54, 0x11, 0x71, 0x76, 0xb, 0xde, 0x9c, 0xf2, 0x12, 0x1d, 0xb6, 0x7, 0x1c, 0xb4, 0x15, 0xf}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/cmdmsgs.tmpl": templatesCmdmsgsTmpl,

	"templates/cmdusages.tmpl": templatesCmdusagesTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"cmdmsgs.tmpl":   &bintree{templatesCmdmsgsTmpl, map[string]*bintree{}},
		"cmdusages.tmpl": &bintree{templatesCmdusagesTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
