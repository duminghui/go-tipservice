// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/cmdmsgs.tmpl (5.328kB)
// templates/cmdusages.tmpl (4.095kB)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesCmdmsgsTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x58\xdd\x6e\xdb\xb8\x12\xbe\xd7\x53\x4c\xd3\x0b\x9f\x63\x24\x7e\x00\xa3\x28\xe0\xfc\x1c\x9c\x1c\xd4\x39\x41\x93\xec\xa2\x57\x35\x2d\x8d\x6d\x6e\x29\x52\x4b\x52\xb1\x0d\x81\xfb\xec\x8b\x21\x29\x59\x8e\x6d\x59\xd9\x16\xbd\xa9\xa9\x99\xf9\x66\xbe\xf9\xe1\x30\x55\x95\xe1\x82\x4b\x84\x8b\x35\x13\x02\xed\x94\x71\x69\x51\x32\x99\xe2\x05\x5c\x39\x97\x54\xd5\xc8\x39\xf8\xdd\x7f\x84\x7c\xf7\x35\xa9\xaa\x2b\x40\x99\x39\x97\x24\x2d\x23\xdc\xae\x32\xcd\xd6\x53\x2e\x27\xb9\x2a\xa5\xbd\xd3\xba\xb1\xf3\x62\x50\x4f\x51\x5a\xae\xa4\x73\x50\x8b\x42\xce\x25\xcf\xcb\x1c\x98\x57\x00\x6e\x60\x56\x55\xa3\x29\x27\xa1\xaa\x1a\x3d\x6d\xf3\xb9\x12\xce\xcd\xba\x11\x7f\x63\x82\x67\xcc\xe2\x24\xcb\xf4\x69\x50\xb2\x4c\x12\xce\xcd\x08\x48\x2a\xdb\x86\x18\x18\x60\x59\xa6\xd1\x98\x6e\xac\x6b\x65\xdf\x05\xc3\x25\xcc\x95\x1d\x18\x08\x1c\x5f\xc2\x56\x95\x90\x32\x09\xa5\x41\x2f\xfb\xa8\x71\xc1\x37\xce\x15\x1c\x67\x90\xaa\x3c\x67\x32\x03\xab\x60\xc9\x5f\x11\x8c\xca\x51\x49\x6c\x3b\xda\xed\x5e\x60\xfe\x41\xd9\x3b\xa9\xca\xe5\xea\xb4\x9b\xe4\x46\xa6\xe4\xc0\xc2\x8a\xbd\x22\xa0\x54\xa5\x5d\xd5\x79\xb0\xaa\x49\x51\x37\xdc\x53\x99\xa6\x68\x4c\x07\x46\x93\x6a\xa2\xc5\x5b\xdf\x4f\x2d\x61\xb5\x28\x4b\xec\x66\x81\x38\x26\x89\xe7\xcd\x7f\x10\xf7\x85\x13\x7f\x7c\xb7\x29\x5e\xb4\x70\xce\xff\xb8\xbf\x75\x2e\x79\x50\x6b\x02\xd3\x30\x67\x82\x0a\x74\x7c\xdc\xeb\x39\x13\xc1\x85\x76\x79\x7f\x3b\xaf\x97\x61\xa1\x0c\xb7\xf7\x72\xa1\x4e\x44\xea\x8d\xec\x57\x53\x54\xaa\xab\x0a\xb8\x19\x27\xed\x40\x8f\x22\x15\x1c\x83\x87\x53\x2e\x4f\xe7\x6e\xba\xdf\x35\xc7\x5b\x06\x98\x10\x6a\x8d\xbe\x96\xe6\x08\x19\x37\x56\xf3\x79\x69\x4f\x74\x6f\xc1\xb1\xa9\x9a\x73\xed\x7b\xa4\x76\x96\xed\xda\x69\x61\x15\x02\x99\x41\x5f\xec\x75\x6d\xb7\x8b\x3e\x92\x34\xf3\x05\x8f\xf6\x2d\x69\x1d\xae\x3e\xa2\x2a\x04\xb6\x7d\x74\x0e\x1e\x14\x14\xfe\xfc\x20\x68\x28\x38\x5e\xc2\xb3\xde\x02\x5b\x32\x2e\x61\xbd\x42\x59\xcb\x32\x8d\xa0\xa4\xe0\xb2\x07\x35\x77\x2c\xed\x68\x2a\xe2\x1f\x65\x76\xb4\xce\xe3\xc8\x89\x64\xed\xb1\x44\x72\x5f\x31\x45\xfe\x8a\xfa\x26\xaa\x06\xdf\x4e\x33\x40\x38\x5e\xf6\xbf\xbc\x55\xcf\x07\x55\x49\x71\x77\xb5\xde\x3f\x41\x6e\xf7\xfc\x58\x28\x21\x78\xa1\x8a\x31\xfc\xf5\xe6\x5f\x55\x8d\x6e\x14\x97\x0f\x2c\xa7\x2e\x7e\xe4\xf8\x56\x62\x9c\x32\x99\x6d\xa9\xe7\xa2\x7b\x44\xee\x81\x8b\x55\xa5\x99\x5c\x22\x34\x7e\x9a\x20\x42\xfd\xef\xdd\xab\x2a\xbe\x80\xd1\xd3\x4a\xad\x27\x42\x84\xb2\x70\x0e\xfe\xc5\x84\xe8\x88\xee\xdf\x51\xf9\x78\x94\xe9\x8a\x49\x89\xe2\xff\x05\x6a\x66\x95\xee\x98\x72\xf1\x88\x2f\x00\xff\x84\x51\xad\x00\x17\x2c\xcb\x6a\xf1\x0b\xb8\x70\x6e\x92\x65\x98\x81\x09\x86\x16\xa5\x10\xdb\x80\x2c\x0c\xb6\xc5\xbe\x62\xae\x68\xec\x1f\xc8\x79\x0f\x67\xed\xfe\x1e\x98\xba\xa3\xa8\xb0\xd6\xc0\x52\x4b\x37\x06\x97\x60\x57\x48\xed\x16\x62\x30\x61\xa6\x45\x0e\x6f\xe2\x21\x38\x07\x9f\x3e\x7a\x16\x3f\x57\x15\x79\xe1\x1c\x0d\x8c\x46\xab\x93\x9e\x82\x23\xed\x0a\x53\x26\xd9\x12\xf5\x17\x6e\x62\x01\x0e\x87\xc3\x78\x36\x1e\x0e\x87\x09\xc0\x70\x48\x54\x8d\xfd\xff\x01\xae\xa0\xaa\xfe\x50\x5c\xc2\x28\x4a\x19\xb8\xb8\xa4\xa8\xbd\xe4\x57\x25\xf0\xa4\x24\x7d\x6c\xa4\x7b\xf8\xd4\x31\xaa\x89\x2b\x83\xfa\x15\x35\xe4\xd1\xd9\xa4\xaa\x2c\xe6\x85\x60\xf6\x44\x70\xa3\x33\xa8\x1d\x70\x4f\x01\xea\x46\xc9\x05\x5f\xee\xe7\x42\x71\x19\x8e\x4d\xe0\xae\x95\xdd\x9a\xbe\x30\x27\xc7\xc3\x21\xb4\x86\xa6\xff\x32\x09\xe9\x6e\xb2\xec\x45\xa8\x11\xea\x14\x53\x63\x04\x0e\x9b\xa4\xfb\x12\xab\xd3\x3d\xd9\x65\xfb\x30\xd9\xfd\x08\x39\x90\xb9\xdb\xa4\xa2\xcc\xb0\x1f\x69\x21\x9c\xd3\xc3\xb4\xf0\xdf\xfd\x75\x71\xad\x6c\x1d\xbc\x5f\xaa\x34\xfa\x0c\x66\xb0\x50\x9a\xca\x9d\x56\xac\x1e\x58\x81\x5d\x9a\xe5\x1b\x6e\x3a\xee\xb7\xd6\xdd\x66\x57\x9c\xfa\x8c\xcb\x81\x01\xe3\xd5\x61\x76\x7e\x31\xdd\x8f\xb0\x1b\xac\xbe\x16\x5b\xe1\xee\x62\x4d\x7d\x7d\x94\x9a\xf9\x59\x63\x95\x0f\x76\xcf\x01\x58\x30\x2e\x30\xfb\x90\xec\x2b\xae\x98\x81\x39\xa2\x6c\x2c\x44\xb2\xde\xeb\x7c\xf7\x82\xf7\xb3\xbe\x9f\x98\x73\x87\xce\x50\x45\x75\x34\x59\x13\x24\x9b\x0b\xdc\x4f\xd7\x38\xb9\xda\x4d\x93\x80\xdc\x6b\x90\xec\x95\x72\x1c\x6e\xf1\x0c\xfc\x34\x8a\x23\x6e\x67\x3c\x7e\xed\x3d\xaa\xa2\x7c\xbf\x51\x85\x11\x5a\x7b\xe8\x9f\xea\xbd\x49\x69\xd5\x23\xd3\x2c\x37\x5f\x70\xb7\x64\xde\x1e\xec\x73\x4d\x72\xbd\xec\x87\x0f\x6f\x41\xc9\xce\x8b\x61\x4b\x3c\x0f\x17\x27\x50\x03\xf6\xbf\xd2\x58\x90\x88\x19\xed\x5d\x5b\xa0\x17\xce\xa7\x8f\x71\x18\x7d\x3e\x8e\xe4\x3d\x8e\x76\x7a\xa2\x52\x26\x1a\xc8\x29\x41\xfa\xf0\x3c\x1a\xf1\xd8\x85\x44\xba\x3d\x61\x9e\x2c\xb3\xa5\x69\x80\xc2\x4f\xc8\x09\x6f\x8e\x30\x08\x9b\xe5\x00\x94\x86\x01\x13\x62\x70\x12\x32\x28\xf6\x04\xbd\x97\x16\xf5\x2b\x13\xad\xb9\x72\xdc\x6a\x2d\xd8\xd3\xee\xb9\xd5\xff\x53\xd8\xf2\x3f\x37\xf1\x31\x90\x65\x3e\x47\x7d\xd2\x81\x60\xf1\x5d\xf0\x5d\x8f\x9f\x5f\x89\xf3\x0b\x9e\xc9\x2c\xcb\x68\xb5\x25\x9b\x60\x99\xf9\x91\x3c\x50\x55\xfb\x29\x57\xe6\xc7\x96\xee\xd9\xa5\x5f\xcb\xc9\xda\x89\xd7\x66\xdd\x33\xdb\x54\xe0\x33\xcf\xf1\x6c\x8a\x1b\xc9\xbe\xc5\x73\xb7\xb1\x28\xb3\x5e\xb6\x27\x0b\x8b\x9a\x24\xfb\x9a\xae\x0d\xd6\xa4\x10\x41\xe1\x8a\x6a\xeb\x1d\xe9\xa2\x37\x17\x4d\x7c\xbe\xbc\xe5\x77\xef\xca\xe8\x26\x30\x5a\xbc\x9d\xbe\xcb\x66\x92\x0a\x9e\xfe\x00\x8d\xb4\x4f\x2b\x09\x63\xa6\xb5\x5a\x9b\xef\x29\xa5\x12\x75\x2a\x54\xfa\x63\xcd\x0d\x8e\x29\xfb\x1a\x17\x1a\xcd\x2a\x6c\x09\xde\x14\x97\x0b\x75\x60\xc2\x58\x55\x7c\x9f\x97\xd6\x2a\xe9\xd5\xe8\x37\xd0\x68\xd5\x61\xdd\xf7\xea\xcf\x54\x3d\x5d\xf1\x90\xc0\x43\xac\xdc\xf0\x4e\xd8\x5d\x1d\xdf\xce\xbc\xc8\x75\x29\xc1\xc7\x4b\xcf\x30\x72\x94\x76\x7f\x9f\x64\x8e\xf7\xb7\xce\x5d\xb6\x42\x08\x4e\x65\x30\xdf\xc2\xb5\xb2\xc9\x75\xfd\xa7\x91\x80\x3c\x3e\xf5\x9a\x4c\x5e\xa4\xbf\x86\x75\x8e\x19\xb4\x64\x5b\xc7\x47\xd5\x3a\xa7\x9c\x09\x81\xc6\xb7\xd4\xf3\x8e\x66\x53\xbb\xd9\xd2\xff\x3b\x00\x00\xff\xff\x13\xb5\x25\x56\xd0\x14\x00\x00")

func templatesCmdmsgsTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesCmdmsgsTmpl,
		"templates/cmdmsgs.tmpl",
	)
}

func templatesCmdmsgsTmpl() (*asset, error) {
	bytes, err := templatesCmdmsgsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/cmdmsgs.tmpl", size: 5328, mode: os.FileMode(420), modTime: time.Unix(1539523484, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x98, 0x2c, 0xe0, 0x6d, 0x8a, 0xb7, 0xa5, 0xc6, 0xa2, 0xc5, 0x1b, 0x25, 0x89, 0xb4, 0x23, 0x83, 0x44, 0x72, 0xe7, 0x7a, 0xb1, 0x4, 0x41, 0x0, 0x5d, 0xfc, 0xe3, 0x8a, 0x31, 0x1e, 0x63, 0x22}}
	return a, nil
}

var _templatesCmdusagesTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x57\xdb\x6e\xdb\x46\x10\x7d\xd7\x57\x0c\x54\x04\x6e\x09\x99\x70\x90\x97\x42\x50\x04\x3b\x41\x0a\x1b\xa8\x5a\xa3\x8e\x91\x38\x69\x01\xae\xc8\xa1\xb4\xe8\x5e\xd8\xdd\xa5\x2f\xa0\xf9\xef\xc5\x2c\x49\x49\x24\x45\xc9\x0f\xce\x1b\xb5\x97\x33\x67\x66\xce\xcc\x8e\x8a\x22\xc1\x94\x2b\x84\xb1\x64\x5c\x8d\xcb\xb2\x28\x50\x25\x65\x39\x1a\x6d\x77\x72\xcb\x56\x38\x86\xd3\xb2\x1c\x15\x45\x78\x6b\xd1\x2c\x50\x39\xae\x55\x59\x42\x51\x84\x1f\x65\xf2\x07\x93\x58\x96\x10\x6b\x29\x99\x4a\xc0\x5f\x98\x16\xc5\xf8\x6f\x42\x1c\x15\xc5\x29\xf4\x40\x33\x8e\xb7\xbb\xb8\x3c\x85\xf0\xca\xde\xac\xf5\x83\x5f\xbe\xe4\xca\x11\x19\x87\x32\x13\xcc\x6d\x59\x84\x50\x73\xf4\xf7\x82\x20\x28\x8a\xf0\xda\x60\xca\x1f\xcb\x32\xe3\x08\xdf\xcf\x0d\xc6\xc8\xef\xd1\x84\x61\xf8\x0f\xcc\x98\xd4\xb9\x72\xf3\x20\x08\x46\x00\x92\x2b\x2e\x73\x09\xd5\xe2\x94\xae\x72\x5c\xf0\xda\x91\x9b\x27\xb9\xd4\x62\x88\xf0\x92\x89\x1d\xc2\x6d\xc3\x4b\x26\x2a\x03\x2b\x74\xb0\x64\x82\xa9\x18\x6b\x23\xfb\xc1\x12\xcc\xb4\xe5\x6e\x10\xb0\xde\xdf\x82\xd6\x0b\xc0\x92\xc4\xa0\xb5\xfb\x51\x1f\xb8\x5b\x27\x86\x3d\xbc\x7a\x60\x1b\x60\x98\xd5\xf6\xe7\x47\x03\xfb\xa5\xbe\xd2\x8f\x2e\x80\x7b\x4c\x91\xf4\x91\x19\xae\x5c\x0a\xe3\x37\xab\x37\x6f\xc6\x10\x7e\x7e\xfc\x0d\xf1\x1a\x4d\x8c\x44\x11\x74\xba\x31\x02\xda\x6c\x4c\x14\x45\x75\xf0\x85\x69\x8b\xd7\x4c\x29\x14\xaf\x1e\x92\x1a\xd7\x47\xe4\xd9\xa0\xd4\xf7\x38\x87\xd9\x4f\xf5\x72\x18\x86\x75\x64\x58\x92\x10\xfb\xea\x04\xb0\xd8\xf1\x7b\x84\xe6\x72\xaa\x0d\x44\x3b\x2e\x44\x27\xb6\x29\xa2\x81\x14\xaf\x51\x64\xb7\x07\xea\xf1\x49\xe7\x10\x33\x05\xb9\x45\x70\x6b\xb4\xb8\xc1\xeb\x1b\x1b\xed\xba\xbc\xad\xc7\xd0\xe3\x6e\x77\xb6\xc2\xef\xee\xb4\x55\xdc\xdd\xed\xa8\x91\x82\xe9\x7d\xaa\xa2\xbf\x60\x8a\xad\xd0\x50\x80\xab\x36\xb1\x7b\xb5\x9d\xb4\x70\xdb\x95\x5e\x78\x3f\xe3\x78\x91\x3b\xbd\xff\xfe\xbe\x56\xb4\x60\x5c\xd5\x88\xaf\xa2\x94\xa2\x08\x3f\x68\xb7\xdb\x97\x64\x85\xde\xd1\xcb\x79\x6e\xd1\x3c\x9f\x1b\x2d\x70\xbe\x47\x2e\xcd\x25\x4a\xdd\x35\xc7\x0f\x7a\xa0\x9d\xd4\x1e\x54\xf6\x7e\x90\x03\x99\xff\x86\x99\xf5\xf2\x99\xc3\xac\x5a\xa8\x68\xc7\x5a\xa5\x7c\xb5\xd9\x3c\xd9\x3c\x05\xd5\xa1\x11\xb4\x84\x19\xf5\xd1\x05\xb7\x2e\x02\xa7\x7d\xb3\xab\xd0\x72\xc3\x96\x02\xa1\x82\x1c\x28\x87\xda\xf1\x2b\x95\xea\x56\x2f\xed\x1b\xe0\x2a\xd5\x9e\xaa\x5d\xeb\x07\xb0\x68\xee\xd1\x34\xb4\x69\xef\x20\xfe\xef\xdc\xba\x23\xf8\xe4\x80\xc7\xa7\x0f\x60\x42\xb4\xbd\x88\x35\x57\x27\x96\x9c\x39\xe6\xcb\xa7\xc7\x58\xe4\xc9\xeb\x3c\x8e\x7d\x9a\x58\xa1\xb7\x65\xf8\xdd\x0b\x90\xde\xcb\x3d\x1a\xdc\xbd\x45\xc7\x0e\xb3\xbf\x3c\xd2\x9f\xee\x06\xfb\xd3\xb4\xdb\x8e\x3a\x89\xed\xb6\x97\x7e\x6a\x06\x4e\xb4\xaa\x62\xe0\x4c\xbb\xf6\x07\x0e\xb5\x33\x13\x1e\x68\x27\xd4\x7c\xae\x99\x61\xf2\xc6\x31\x97\xdb\x96\x74\x4e\x2d\xcc\xb4\x12\x5c\xe1\x33\x13\x62\x3e\x0d\x02\xf8\x53\x89\x27\xaa\x6f\xd2\x7f\xb5\x05\x19\xea\x4c\xa0\xa5\x3c\x90\x96\x9a\x9f\x91\xce\x28\x90\xd3\x04\x53\x96\x0b\x57\x9f\x8e\x8e\x13\xb9\x52\x0e\xcd\x7d\x67\x84\x39\xe5\x30\xe3\xf5\x86\x27\x32\xfb\xba\xbe\x93\xdf\xec\xfc\xe7\xaf\xb0\xd6\xb9\x81\x3b\x7a\x75\x73\x87\xf0\x0d\x2c\xc6\x5a\x25\xf0\x0b\x50\xf9\x08\xad\x56\xe0\xb8\xf4\x8c\x89\xb8\x56\x31\x4e\x20\x92\xb9\x75\x30\x87\xb7\xbf\x9e\xd9\x49\x87\x29\xad\x45\x23\x00\x80\x4f\x8f\x4c\x66\x02\xa7\x10\xbd\x5d\x47\xc0\x2d\x68\x85\xde\xdc\x84\x56\xde\x9d\xc9\x7a\xb1\xa2\x40\x4d\xe4\xdd\x59\xcd\x63\x58\x7b\x1b\x47\x2f\xfc\xc4\xd0\x76\x93\x55\x83\x04\x0d\x2b\x53\x88\x16\x44\x72\x89\xc0\x40\xe5\x72\x89\x06\xe6\xef\x61\x60\x12\x8c\x00\x82\x20\x88\x0c\xfe\x97\x1b\x8e\x49\x44\x4f\xfa\x51\x06\x1f\x9f\x62\x81\x9f\xb9\xc4\x4e\xde\x63\x98\xc5\x9b\x2d\x1f\xee\x4b\xfd\x40\x2d\xfe\xc9\x87\xd2\x52\x2c\x09\x84\x02\xda\xc4\xb2\x45\x13\xce\x26\xd0\x8d\xea\xd9\x0b\x72\x7f\x91\x3a\x34\x64\xb5\xcd\x87\x9a\x00\xed\x90\xf1\x0d\x9d\x56\x66\x1b\x36\xe0\xcf\x41\x6c\x90\xca\xc1\x31\xfb\xef\x04\x2c\x93\x08\xcc\x6e\x05\xe4\x61\x60\x99\xbb\x46\x06\xef\x29\x6f\x95\x6c\x6c\x8f\xf8\x3b\x52\xc3\xf1\x50\xf6\x86\xb7\x20\xd8\xcc\x58\x9e\xf3\x97\x35\x8f\xd7\xcd\x3c\x75\x62\xeb\x42\xf1\x2d\x86\x5e\x92\xcc\x87\xb2\x63\x3b\xce\x8d\x41\xe5\x9a\x5b\x91\xcf\xf1\x55\x0a\x29\x17\x02\xb8\x83\x4d\xe4\x1d\xb5\x28\x62\x48\xb3\x28\x7d\x36\xaf\x9a\x2f\xba\x17\x89\xe1\x2f\x2d\xda\x61\x9f\x55\x8f\x7d\xc5\x5d\x93\xd2\x09\xb8\x5e\xdd\xe5\xbd\x51\x1e\x37\x98\x4c\x60\xf1\x3a\xa4\x7e\xc4\x7f\x2e\x2f\x93\x4e\x5b\x83\x56\x6f\x81\xa6\x04\x69\x96\xef\x14\x02\xb4\x85\xb8\x9d\xa1\xe7\x4d\x54\xaa\x41\xfa\x82\x5e\x25\x85\xc0\xc8\x1a\xc5\x87\x74\x38\x02\xd8\x33\xf7\xf5\x5b\x6f\xe8\xff\x77\x0c\x1d\xed\x34\xc7\xc3\x87\x5b\x0d\xe6\xf0\xd1\x5e\x27\x38\x82\xdc\xa9\xd3\x23\xe0\xdd\x19\xf9\xc0\xd9\x1d\x15\xb6\x9f\xad\xff\x03\x00\x00\xff\xff\xd9\xab\xc5\x01\xff\x0f\x00\x00")

func templatesCmdusagesTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesCmdusagesTmpl,
		"templates/cmdusages.tmpl",
	)
}

func templatesCmdusagesTmpl() (*asset, error) {
	bytes, err := templatesCmdusagesTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/cmdusages.tmpl", size: 4095, mode: os.FileMode(420), modTime: time.Unix(1539512390, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5d, 0xa9, 0x65, 0x4e, 0x9a, 0xa5, 0xb3, 0x71, 0x4f, 0xa5, 0xf3, 0xee, 0x89, 0x88, 0xd0, 0x16, 0x77, 0x8d, 0xda, 0x65, 0x71, 0x52, 0xc, 0xbe, 0x65, 0xc1, 0x8b, 0x6d, 0xf2, 0x5f, 0xcf, 0xaa}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/cmdmsgs.tmpl": templatesCmdmsgsTmpl,

	"templates/cmdusages.tmpl": templatesCmdusagesTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"cmdmsgs.tmpl":   &bintree{templatesCmdmsgsTmpl, map[string]*bintree{}},
		"cmdusages.tmpl": &bintree{templatesCmdusagesTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
