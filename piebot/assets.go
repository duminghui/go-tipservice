// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/cmdmsgs.tmpl (5.322kB)
// templates/cmdusages.tmpl (5.182kB)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesCmdmsgsTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x58\xdb\x6e\xe3\xbc\x11\xbe\xd7\x53\x4c\xb3\x17\x6e\x8d\xc4\x0f\x60\x2c\x16\x70\x0e\x45\x53\xac\xd3\x60\x93\xb4\xd8\xab\x35\x2d\x8d\x6d\x76\x29\x52\x25\xa9\x38\x86\xc0\x3e\xfb\x8f\x21\x29\x59\x8e\x2d\x59\xf9\x77\xb1\x37\x6b\x6a\x66\xbe\x99\x6f\x0e\x1c\xa6\xaa\x32\x5c\x71\x89\x70\xb1\x65\x42\xa0\x9d\x33\x2e\x2d\x4a\x26\x53\xbc\x80\x2b\xe7\x92\xaa\x9a\x38\x07\xff\xf1\x1f\x21\xdf\x7f\x4d\xaa\xea\x0a\x50\x66\xce\x25\x49\xcb\x08\xb7\x9b\x4c\xb3\xed\x9c\xcb\x59\xae\x4a\x69\xef\xb4\x6e\xec\xbc\x18\xd4\x73\x94\x96\x2b\xe9\x1c\xd4\xa2\x90\x73\xc9\xf3\x32\x07\xe6\x15\x80\x1b\x58\x54\xd5\x64\xce\x49\xa8\xaa\x26\x4f\xbb\x7c\xa9\x84\x73\x8b\x7e\xc4\x7f\x33\xc1\x33\x66\x71\x96\x65\xba\x1b\x94\x2c\x93\x84\x73\x0b\x02\x92\xca\xb6\x21\x46\x06\x58\x96\x69\x34\xa6\x1f\xeb\x5a\xd9\x0f\xc1\x70\x09\x4b\x65\x47\x06\x02\xc7\x97\xb0\x53\x25\xa4\x4c\x42\x69\xd0\xcb\x3e\x6a\x5c\xf1\x37\xe7\x0a\x8e\x0b\x48\x55\x9e\x33\x99\x81\x55\xb0\xe6\xaf\x08\x46\xe5\xa8\x24\xb6\x1d\xed\x77\x2f\x30\xff\xa0\xec\x9d\x54\xe5\x7a\xd3\xed\x26\xb9\x91\x29\x39\xb2\xb0\x61\xaf\x08\x28\x55\x69\x37\x75\x1e\xac\x6a\x52\xd4\x0f\xf7\x54\xa6\x29\x1a\xd3\x83\xd1\xa4\x9a\x68\xf1\xd6\x0f\x53\x4b\x58\x2d\xca\x12\xfb\xb6\x42\x9c\x92\xc4\xf3\xdb\xdf\x11\x0f\x85\x13\x7f\x7c\xf7\x56\xbc\x68\xe1\x9c\xff\x71\x7f\xeb\x5c\xf2\xa0\xb6\x04\xa6\x61\xc9\x04\x15\xe8\xf4\xb4\xd7\x4b\x26\x82\x0b\xed\xf2\xfe\x7e\x5e\x2f\xc3\x42\x19\x6e\xef\xe5\x4a\x75\x44\xea\x8d\x1c\x56\x53\x54\xaa\xab\x0a\xb8\x99\x26\xed\x40\x4f\x22\x15\x1c\x83\x87\x73\x2e\xbb\x73\x37\x3f\xec\x9a\xd3\x2d\x03\x4c\x08\xb5\x45\x5f\x4b\x4b\x84\x8c\x1b\xab\xf9\xb2\xb4\x1d\xdd\x5b\x70\x6c\xaa\xe6\x5c\xfb\x9e\xa8\x9d\x75\xbb\x76\x5a\x58\x85\x40\x66\xd0\x17\x7b\x5d\xdb\xed\xa2\x8f\x24\x2d\x7c\xc1\xa3\x7d\x4f\x5a\x8f\xab\x8f\xa8\x0a\x81\x6d\x1f\x9d\x83\x07\x05\x85\x3f\x3f\x0a\x1a\x0a\x8e\x97\xf0\xac\x77\xc0\xd6\x8c\x4b\xd8\x6e\x50\xd6\xb2\x4c\x23\x28\x29\xb8\x1c\x40\xcd\x1d\x4b\x7b\x9a\x8a\xf8\x47\x99\x9d\xac\xf3\x38\x72\x22\x59\x07\x2c\x91\xdc\x37\x4c\x91\xbf\xa2\xbe\x89\xaa\xc1\xb7\x6e\x06\x08\xc7\xcb\xfe\x83\xb7\xea\xf9\xa8\x2a\x29\xee\xbe\xd6\xfb\x33\xc8\xed\x9e\x9f\x0a\x25\x04\x2f\x54\x31\x85\xff\xbf\xfb\x57\x55\x93\x1b\xc5\xe5\x03\xcb\xa9\x8b\x1f\x39\xbe\x97\x98\xa6\x4c\x66\x3b\xea\xb9\xe8\x1e\x91\x7b\xe4\x62\x55\x69\x26\xd7\x08\x8d\x9f\x26\x88\x50\xff\x7b\xf7\xaa\x8a\xaf\x60\xf2\xb4\x51\xdb\x99\x10\xa1\x2c\x9c\x83\xbf\x32\x21\x7a\xa2\xfb\x5b\x54\x3e\x1d\x65\xba\x61\x52\xa2\xf8\x57\x81\x9a\x59\xa5\x7b\xa6\x5c\x3c\xe2\x2b\xc0\xff\xc1\xa4\x56\x80\x0b\x96\x65\xb5\xf8\x05\x5c\x38\x37\xcb\x32\xcc\xc0\x04\x43\xab\x52\x88\x5d\x40\x16\x06\xdb\x62\xdf\x30\x57\x34\xf6\x8f\xe4\xbc\x87\x8b\x76\x7f\x8f\x4c\xdd\x51\x54\x58\x5b\x60\xa9\xa5\x1b\x83\x4b\xb0\x1b\xa4\x76\x0b\x31\x98\x30\xd3\x22\x87\x37\xf1\x10\x9c\x83\xcf\x9f\x3c\x8b\x5f\xaa\x8a\xbc\x70\x8e\x06\x46\xa3\xd5\x4b\x4f\xc1\x91\x76\x85\x39\x93\x6c\x8d\xfa\x2b\x37\xb1\x00\xc7\xe3\x71\x3c\x9b\x8e\xc7\xe3\x04\x60\x3c\x26\xaa\xa6\xfe\xff\x00\x57\x50\x55\xff\x55\x5c\xc2\x24\x4a\x19\xb8\xb8\xa4\xa8\xbd\xe4\x37\x25\xb0\x53\x92\x3e\x36\xd2\x03\x7c\xea\x19\xd5\xc4\x95\x41\xfd\x8a\x1a\xf2\xe8\x6c\x52\x55\x16\xf3\x42\x30\xdb\x11\xdc\xe4\x0c\x6a\x0f\xdc\x53\x80\xba\x51\x72\xc5\xd7\x87\xb9\x50\x5c\x86\x63\x13\xb8\x6b\x65\xb7\xa6\x2f\xcc\xc9\xe9\x78\x0c\xad\xa1\xe9\xbf\xcc\x42\xba\x9b\x2c\x7b\x11\x6a\x84\x3a\xc5\xd4\x18\x81\xc3\x26\xe9\xbe\xc4\xea\x74\xcf\xf6\xd9\x3e\x4e\xf6\x30\x42\x8e\x64\xee\xde\x52\x51\x66\x38\x8c\xb4\x10\x4e\xf7\x30\x2d\xfc\x77\x7f\x5d\x5c\x2b\x5b\x07\xef\x97\x2a\x8d\x3e\x83\x19\xac\x94\xa6\x72\xa7\x15\x6b\x00\x56\x60\x97\x66\xf9\x1b\x37\x3d\xf7\x5b\xeb\x6e\xb3\x1b\x4e\x7d\xc6\xe5\xc8\x80\xf1\xea\xb0\x38\xbf\x98\x1e\x46\xd8\x0f\x56\x5f\x8b\xad\x70\xf7\xb1\xa6\xbe\x3e\x4a\xcd\xfc\xac\xb1\xca\x07\x7b\xe0\x00\xac\x18\x17\x98\xfd\x25\x39\x54\xdc\x30\x03\x4b\x44\xd9\x58\x88\x64\x7d\xd4\xf9\xfe\x05\xef\x57\x7d\xef\x98\x73\xc7\xce\x50\x45\xf5\x34\x59\x13\x24\x5b\x0a\x3c\x4c\xd7\x34\xb9\xda\x4f\x93\x80\x3c\x68\x90\x1c\x94\x72\x1c\x6e\xf1\x0c\xfc\x34\x8a\x23\x6e\x6f\x3c\x7e\x1d\x3c\xaa\xa2\xfc\xb0\x51\x85\x11\x5a\x7b\xe8\x5f\xea\xbd\x59\x69\xd5\x23\xd3\x2c\x37\x5f\x71\xbf\x64\xde\x1e\xed\x73\x4d\x72\xbd\xec\x7b\x48\xb2\xf2\x62\xd8\x1a\xcf\x83\xc5\xf9\xd3\x40\xfd\xb3\x34\x16\x24\x62\x46\x5b\xd7\x0e\xe8\x7d\xf3\xf9\x53\x1c\x45\x5f\x4e\xe1\x78\x6f\xa3\x95\x81\x98\x94\x85\x06\x70\x4e\x80\x3e\x34\x8f\x45\x1c\x76\xe3\x90\xe6\x40\x90\x27\xcb\x6c\x69\x1a\x98\xf0\x13\x72\x42\x5b\x22\x8c\xc2\x4e\x39\x02\xa5\x61\xc4\x84\x18\x75\x42\x06\xc5\x81\xa0\xf7\xd2\xa2\x7e\x65\xa2\x35\x51\x4e\x5b\xad\x05\x07\xda\x3d\xb7\xf4\x7f\x0e\xfb\xfd\x97\x26\x3e\x06\xb2\xcc\x97\xa8\x3b\x1d\x08\x16\x3f\x04\xdf\xf7\xec\xf9\x9d\x38\xbf\xe1\x81\xcc\xb2\x8c\x96\x5a\xb2\x09\x96\x99\x9f\xc9\x03\x55\xb4\x9f\x6f\x65\x7e\x6a\xdd\x5e\x5c\xfa\x85\x9c\xac\x75\xbc\x33\xeb\x7e\xd9\xa5\x02\x9f\x79\x8e\x67\x53\xdc\x48\x0e\x2d\x9e\xbb\x37\x8b\x32\x1b\x64\x7b\xb6\xb2\xa8\x49\x72\xa8\xe9\xda\x60\x4d\x0a\x11\x14\x2e\xa7\xb6\xde\x89\x2e\x7a\x77\xc5\xc4\x87\xcb\x7b\x7e\x0f\x2e\x8b\x7e\x02\xa3\xc5\xdb\xf9\x87\x6c\x26\xa9\xe0\xe9\x4f\xd0\x48\x9b\xb4\x92\x30\x65\x5a\xab\xad\xf9\x91\x52\x2a\x51\xa7\x42\xa5\x3f\xb7\xdc\xe0\x94\xb2\xaf\x71\xa5\xd1\x6c\xc2\x7e\xe0\x4d\x71\xb9\x52\x47\x26\x8c\x55\xc5\x8f\x65\x69\xad\x92\x5e\x8d\x7e\x03\x0d\x55\x1d\x16\x7d\xaf\xfe\x4c\xd5\xd3\x17\x0f\x09\x3c\xc4\xca\x0d\x2f\x84\xfd\xa5\xf1\xfd\xcc\x5b\x5c\x97\x12\x7c\xbc\xf4\x00\x23\x47\x69\xeb\xf7\x49\xe6\x78\x7f\xeb\xdc\x65\x2b\x84\xe0\x54\x06\xcb\x1d\x5c\x2b\x9b\x5c\xd7\x7f\x14\x09\xc8\xd3\xae\x77\x64\xf2\x22\xfd\x05\xac\x73\xcc\xa0\x25\xdb\x3a\x3e\xa9\xd6\x3b\xe5\x4c\x08\x34\xbe\xa2\x9e\xf7\x34\x9b\xda\xcd\x96\xfe\x1f\x01\x00\x00\xff\xff\x9c\x2e\x3e\xe5\xca\x14\x00\x00")

func templatesCmdmsgsTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesCmdmsgsTmpl,
		"templates/cmdmsgs.tmpl",
	)
}

func templatesCmdmsgsTmpl() (*asset, error) {
	bytes, err := templatesCmdmsgsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/cmdmsgs.tmpl", size: 5322, mode: os.FileMode(420), modTime: time.Unix(1539663312, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x4e, 0x65, 0xaf, 0x65, 0x2e, 0xfb, 0xe7, 0x21, 0x9c, 0xdf, 0x75, 0xbd, 0x55, 0x36, 0x44, 0x57, 0xf7, 0x4e, 0x80, 0xa, 0x77, 0x11, 0x9, 0xd, 0xdb, 0xd9, 0xbe, 0x8, 0x18, 0x52, 0x72, 0x54}}
	return a, nil
}

var _templatesCmdusagesTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x57\x5d\x6f\xdb\xb8\x12\x7d\xf7\xaf\x18\xe4\xa2\xc8\xbd\x86\x23\xb8\xe8\xcb\x85\xe1\x18\x4d\x83\x5e\x34\xc0\xcd\x6e\xb0\x6d\xb7\x5f\xbb\x80\x68\x69\x64\x11\x4b\x91\x5a\x92\x72\x12\xa8\xfe\xef\x8b\x21\x29\x5b\x92\x2d\x3b\x0f\xc9\x9b\x4d\x0e\xcf\x9c\xf9\xe0\xe1\xa8\xae\x53\xcc\xb8\x44\x38\x2b\x18\x97\x67\x9b\x4d\x5d\xa3\x4c\x37\x9b\xd1\x68\xb7\x53\x19\xb6\xc2\x33\xb8\xd8\x6c\x46\x75\x1d\x7d\x36\xa8\x6f\x51\x5a\xae\xe4\x66\x03\x75\x1d\x5d\x17\xe9\x2f\xac\xc0\xcd\x06\x12\x55\x14\x4c\xa6\xe0\x0e\xcc\xea\xfa\xec\x0f\x42\x1c\xd5\xf5\x05\xec\x81\x96\x1c\x3f\xb7\x71\x79\x06\xd1\x8d\xf9\x98\xab\x7b\xb7\xfc\x81\x4b\x4b\x64\x2c\x16\xa5\x60\x76\xc7\x22\x82\xc0\xd1\x9d\x1b\x8f\xc7\x75\x1d\xdd\x69\xcc\xf8\xc3\x66\x53\x72\x84\x1f\x6f\x35\x26\xc8\xd7\xa8\xa3\x28\xfa\x13\xe6\xac\x50\x95\xb4\x8b\xf1\x78\x3c\x02\x28\xb8\xe4\x45\x55\x80\x5f\x9c\xd1\x51\x8e\xb7\x3c\x04\xf2\xf1\xb1\x58\x2a\x31\x44\x78\xc9\x44\x8b\x70\xd7\xf1\x92\x09\xef\x60\x85\x16\x96\x4c\x30\x99\x60\x70\x72\x18\x2c\xc5\x52\x19\x6e\x07\x01\xc3\xfe\x0e\x34\x2c\x00\x4b\x53\x8d\xc6\x1c\x46\xbd\xe7\x36\x4f\x35\xbb\x7f\xf6\xc4\x36\xc0\x30\x0f\xfe\x17\x27\x13\xfb\x25\x1c\xd9\xcf\x2e\x80\x7d\xc8\x90\xfa\xa3\xd4\x5c\xda\x0c\xce\x5e\xad\x5e\xbd\x3a\x83\xe8\xd3\xc3\xff\x10\xef\x50\x27\x48\x14\x41\x65\x5b\x27\xa0\xf4\xd6\x45\x5d\x7b\xc3\x27\x96\x2d\xc9\x99\x94\x28\x9e\x3d\x25\x01\xd7\x65\xe4\xa7\xc6\x42\xad\x71\x01\xf3\x7f\x85\xe5\x28\x8a\x42\x66\x58\x9a\x12\x7b\x6f\x01\x2c\xb1\x7c\x8d\xd0\x1c\xce\x94\x86\xb8\x15\x42\x7c\x6e\x9a\x4b\x34\x50\xe2\x1c\x45\xf9\xf9\xc8\x7d\x7c\x54\x15\x24\x4c\x42\x65\x10\x6c\x8e\x06\xb7\x78\xfb\xce\x46\xed\x90\x77\xf7\x31\x72\xb8\xbb\x9d\x5d\xe3\xf7\x77\xba\x5d\xdc\xdf\xed\x75\x23\x25\xd3\xc5\xe4\xb3\x7f\xcb\x24\x5b\xa1\xa6\x04\x7b\x99\x68\x1f\xed\x16\x2d\xda\xa9\xd2\x13\xcf\x97\x1c\xaf\x2a\xab\x0e\x9f\x3f\x24\x45\xb7\x8c\xcb\x80\xf8\x2c\x9d\x52\xd7\xd1\x3b\x65\xdb\xba\x54\x78\xf4\x5e\xbf\xbc\xad\x0c\xea\x9f\x6f\xb5\x12\xb8\x38\xd0\x2e\xcd\x21\x2a\xdd\x1d\xc7\x77\x6a\x40\x4e\x42\x04\xde\xdf\x0b\x05\x50\xba\xdf\x30\x37\xae\x7d\x16\x30\xf7\x0b\x9e\x76\xa2\x64\xc6\x57\xdb\xcd\xf3\xed\x53\xe0\x8d\x46\xd0\x69\xcc\x78\x1f\x5d\x70\x63\x63\xb0\xca\x89\x9d\x47\xab\x34\x5b\x0a\x04\x0f\x39\x70\x1d\x42\xe0\x37\x32\x53\x1d\x2d\xdd\x77\xc0\x65\xa6\x1c\x55\x93\xab\x7b\x30\xa8\xd7\xa8\x1b\xda\xb4\x77\x14\xff\xff\xdc\xd8\x13\xf8\x14\x80\xc3\xa7\x1f\xc0\x84\xe8\x46\x91\x28\x2e\xcf\x0d\x05\x73\x2a\x96\xf7\x0f\x89\xa8\xd2\xe7\x79\x1c\xf7\x69\xa2\x47\xef\xb6\xe1\x0f\xd7\x80\xf4\x5e\x1e\xe8\xc1\xf6\x29\x32\x3b\xce\xfe\xc3\x09\x7d\xfa\x36\xa8\x4f\xb3\xbe\x1c\xf5\x0a\xdb\x97\x97\xfd\xd2\x0c\x58\x74\x6e\xc5\x80\x4d\xf7\xee\x0f\x18\x75\x2b\x13\x1d\x91\x13\x12\x9f\x3b\xa6\x59\xf1\xd1\x32\x5b\x99\x4e\xeb\x5c\x18\x98\x2b\x29\xb8\xc4\x9f\x4c\x88\xc5\x6c\x3c\x86\x5f\xa5\x78\xa4\xfb\x4d\xfd\xef\xb7\xa0\x44\x55\x0a\x34\x54\x07\xea\xa5\xe6\x6f\xac\x4a\x4a\xe4\x2c\xc5\x8c\x55\xc2\x06\xeb\xf8\x34\x91\x1b\x69\x51\xaf\x7b\x23\xcc\x05\x87\x39\x0f\x1b\x8e\xc8\xfc\x6b\xfe\xad\xf8\x6e\x16\xff\xfe\x0a\xb9\xaa\x34\x7c\xa3\x57\xb7\xb2\x08\xdf\xc1\x60\xa2\x64\x0a\xff\x01\xba\x3e\x42\xc9\x15\x58\x5e\x38\xc6\x44\x5c\xc9\x04\x27\x10\x17\x95\xb1\xb0\x80\xd7\xff\x9d\x9a\x49\x8f\x29\xad\xc5\x23\x00\x80\xf7\x0f\xac\x28\x05\xce\x20\x7e\x9d\xc7\xc0\x0d\x28\x89\xce\xdd\x84\x56\xde\x4c\x8b\xb0\xe8\x29\x90\x88\xbc\x99\x06\x1e\xc3\xbd\xb7\x0d\xf4\xca\x4d\x0c\xdd\x30\x99\x1f\x24\x68\x58\x99\x41\x7c\x4b\x24\x97\x08\x0c\x64\x55\x2c\x51\xc3\xe2\x12\x06\x26\xc1\x18\x60\x3c\x1e\xc7\x1a\xff\xae\x34\xc7\x34\xa6\x27\xfd\x24\x83\xeb\xc7\x44\xe0\x27\x5e\x60\xaf\xee\x09\xcc\x93\xed\x96\x4b\xf7\x07\x75\x4f\x12\xff\xe8\x52\x69\x28\x97\x04\x42\x09\x6d\x72\xd9\xa1\x09\xd3\x09\xf4\xb3\x3a\x7d\x42\xed\xaf\x32\x8b\x9a\xbc\x76\xf9\x90\x08\xd0\x0e\x39\xdf\xd2\xe9\x54\xb6\x61\x03\xce\x0e\x12\x8d\x74\x1d\x2c\x33\x7f\x4d\xc0\xb0\x02\x81\x99\x5d\x03\x39\x18\x58\x56\xb6\x69\x83\x4b\xaa\x9b\x6f\x1b\xb3\x47\xfc\x0d\x75\xc3\xe9\x54\xee\x0d\x6f\xe3\xf1\x76\xc6\x72\x9c\xbf\xe4\x3c\xc9\x9b\x79\xea\xdc\x84\x8b\xe2\x24\x86\x5e\x92\xd2\xa5\xb2\xe7\x3b\xa9\xb4\x46\x69\x9b\x53\xb1\xab\xf1\x4d\x06\x19\x17\x02\xb8\x85\x6d\xe6\x2d\x49\x14\x31\xa4\x59\x94\x7e\x36\xaf\x9a\xbb\x74\x4f\x6a\x86\xdf\x94\xe8\xa6\x7d\xee\x1f\x7b\xcf\x5d\x51\xa7\x13\x70\x58\x6d\xf3\x76\xac\x7a\xcc\x49\x0a\xc8\x70\x02\xb7\xcf\xc3\xf1\x25\x3e\xc1\x5c\xd7\xf4\x54\x0e\x3a\x52\x03\xcd\x8d\xa4\xd1\xbe\x77\x2f\xa0\xdb\x97\xbb\x91\x7a\xd1\x24\xc9\xcf\xd5\x57\xf4\x48\x49\x04\x46\xde\x28\x5d\xd4\x96\x23\x80\x03\x63\xe0\xbe\x12\x47\xee\x33\x64\xc8\xb4\xa7\x95\xc7\x8d\x3b\x7a\x73\xdc\x74\x4f\x18\x4e\x20\xf7\xae\xed\x09\xf0\xfe\xc8\x7c\xc4\xb6\xd5\x94\x83\xaf\xd8\x9a\x97\x83\x5f\xa7\x6b\x5e\xfa\x22\x50\xaf\xd0\x53\xae\xcf\x0d\xfc\x7e\x73\x07\xa5\xe2\xd2\x0e\x88\xf4\x9a\x97\xe4\xd7\x1c\x43\x75\x06\x2d\x68\xc2\x3c\x32\x73\x84\x13\x77\xce\xeb\xb3\xb7\x72\x07\x7d\x7b\x43\xe7\x3e\xc6\xd0\x85\xd7\x7e\x80\xb4\x39\xb3\xee\x61\x74\x6a\xee\x2d\x20\x55\x7e\xbd\x39\x69\x15\x54\xe5\x4a\xb3\x14\x47\xb0\x85\x81\x46\x2b\xa7\x13\xfa\xb0\xb9\x74\x3f\x52\x14\x48\x42\x9b\x73\xe3\xc2\x27\x5d\x3b\x9e\xd9\x50\xfd\xa3\xc9\x6d\x6c\x3c\xf3\x90\xe1\xeb\xad\x72\xae\xe8\xc3\x34\x50\x77\xbc\xef\x73\x94\xa4\x26\x25\x91\x49\xfd\xfd\x3a\xe1\xff\xe5\x2a\xd1\x71\xd0\x11\x85\x43\xf5\x30\xfd\x5a\xd0\x87\x05\xc5\xd7\x8b\x69\xf7\x6e\x04\xf5\x78\x72\x59\x5a\x2f\xce\xf1\xca\xd0\xf8\xfb\x72\x69\xd9\xa1\x87\x6f\xc9\x7e\x42\xc2\x2c\x6f\xaa\x65\x73\x4f\xd7\xbc\x6c\x38\xb7\xe2\x5d\x4c\x67\xce\xd6\xff\x9f\xc0\x7c\x3a\x73\x87\x1a\x83\x09\x5c\x4e\x67\x7c\x25\x95\xc6\x56\xa8\xff\x04\x00\x00\xff\xff\x85\x74\x51\x38\x3e\x14\x00\x00")

func templatesCmdusagesTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesCmdusagesTmpl,
		"templates/cmdusages.tmpl",
	)
}

func templatesCmdusagesTmpl() (*asset, error) {
	bytes, err := templatesCmdusagesTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/cmdusages.tmpl", size: 5182, mode: os.FileMode(420), modTime: time.Unix(1539698455, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x45, 0xf1, 0xac, 0xb9, 0x37, 0xf, 0xd1, 0xad, 0x32, 0xe9, 0xb6, 0x39, 0x1d, 0xb3, 0xc1, 0x84, 0x1f, 0x6c, 0xe, 0xdf, 0x71, 0x36, 0xf3, 0x1a, 0xa8, 0x78, 0x90, 0xc6, 0x50, 0x44, 0xcf, 0x32}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/cmdmsgs.tmpl": templatesCmdmsgsTmpl,

	"templates/cmdusages.tmpl": templatesCmdusagesTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"cmdmsgs.tmpl":   &bintree{templatesCmdmsgsTmpl, map[string]*bintree{}},
		"cmdusages.tmpl": &bintree{templatesCmdusagesTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
