// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/cmdusages.tmpl (1.86kB)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesCmdusagesTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x54\xdf\x6b\xdb\x30\x10\x7e\xf7\x5f\x71\x64\x0f\x05\xd3\x9a\x3c\x07\xc7\x6c\x84\x41\x0b\xeb\x08\x6b\xbb\xa7\x3d\x54\x89\xce\x8e\x36\x4b\x32\x92\x9c\x36\x08\xfd\xef\x43\xb2\x9d\xd8\x59\x5c\x6f\xb0\x3e\x25\xbe\x1f\xdf\xdd\xf7\xdd\x9d\xac\xa5\x98\x33\x81\x30\xe3\x84\x89\x99\x73\xd6\xa2\xa0\xce\x45\xd1\xc9\x53\x6b\x52\xe0\x0c\x6e\x9c\x8b\xac\x4d\x9e\x34\xaa\x7b\x14\x86\x49\xe1\x1c\x58\x9b\xac\x38\xfd\x4a\x38\x3a\x07\x5b\xc9\x39\x11\x14\x42\xc2\xc2\xda\xd9\x0f\x8f\x18\x59\x7b\x03\x7f\x80\xee\x59\x75\x8b\x65\xf5\xf4\x06\xf6\x41\xd6\xb0\x25\x02\x6a\x8d\x60\x76\xa8\xb1\x2b\xa0\x21\x97\x2a\xb2\xd6\x20\xaf\x4a\x62\x1a\xb4\x16\x29\x09\x48\x03\xcf\xa3\x1c\x3a\x59\x0e\xc9\x9d\xbe\x27\x82\x14\xa8\xda\xd2\x83\x84\xb5\x64\xc2\xe8\x71\xc0\x6f\xb2\xc4\x09\xf7\x14\xc4\x6a\x47\x84\xc0\x72\x3a\x62\x0a\xe8\x33\x97\x3f\xd9\xc0\xdd\x89\x3d\x26\x7b\x4f\xf2\x38\x8e\xad\x4d\xd6\x0a\x73\xf6\xea\xdc\x9e\x55\x71\x1c\x47\x00\x0f\x3b\xf9\xe2\x55\x57\x57\x1a\x9e\xad\x4d\x1e\x0e\x7c\x23\x4b\xe7\x9e\xe1\xfb\xdd\x1a\xaa\xd0\xd1\x28\x7c\x5f\x9c\x8b\x35\x42\x40\xaf\x90\xc7\x54\xde\xf6\x26\xe4\x40\x87\x9b\xde\x1c\x3d\x46\x30\xdf\x32\x61\xfc\xfe\x9e\xe4\x69\x17\x37\x81\x76\xad\xc7\xfb\x69\xd0\x21\xfd\xe8\x1b\xc9\x20\x6d\x38\x66\x4d\x97\x2b\x29\x72\x56\x80\xd9\x11\x03\xbe\x61\x4e\xc4\xa1\x55\x01\xa8\x6c\xec\x5d\xa6\x91\x50\x57\x85\x22\x14\x23\x38\xc2\x00\xaf\xb5\x81\x6c\x09\xf3\x6b\x60\x39\x2c\xc3\x1f\x8a\x25\x1a\xbf\xd8\x4c\x07\xfa\x57\x7a\x4a\xd9\xb3\x9d\xb9\x48\xa6\x8b\x69\x3a\x6f\x15\x6e\x8d\x57\x1a\x0a\xb6\xc7\xae\xf5\xd0\xf7\xcb\x0e\x85\x3f\xab\xca\x37\x43\xc1\x10\xfd\x6b\xaa\xfe\xfb\x4d\x62\x50\x00\xd2\x0f\xdb\xe6\x7b\x64\x1e\xfa\x7c\x16\x46\x36\xfc\xce\x38\x6d\x8f\xec\x03\xbb\x7f\x18\xcb\x29\x73\x62\x32\xef\x27\xc9\x71\x31\xfd\x39\x9e\x0b\xf1\x89\x52\x90\x0a\x74\xbd\xe9\xae\xb5\x77\x9f\x3d\x9e\xd9\x7c\x01\x84\xd2\xd6\x73\x0d\xe9\x7c\x11\x92\xba\x80\x6b\x58\xce\x17\xac\x10\x52\xe1\x28\xc5\xfe\x3b\xf3\x5f\x19\x06\x60\x48\xd1\xff\x64\xdd\xda\xb6\x23\x0e\xc6\x66\x51\xfd\x64\xc5\xdf\xbc\x3f\xa7\xd7\xfe\x62\xb9\x47\x59\x41\xca\x04\xc5\xd7\x6c\x70\x23\x1e\xf9\x0b\x12\x8a\x6a\x23\x89\xa2\xc1\xd1\xc6\x35\x7b\xb2\x41\x20\x20\x6a\xbe\x41\x05\x19\xcc\x7b\xf5\x7f\x07\x00\x00\xff\xff\xc1\x4c\x90\x95\x44\x07\x00\x00")

func templatesCmdusagesTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesCmdusagesTmpl,
		"templates/cmdusages.tmpl",
	)
}

func templatesCmdusagesTmpl() (*asset, error) {
	bytes, err := templatesCmdusagesTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/cmdusages.tmpl", size: 1860, mode: os.FileMode(420), modTime: time.Unix(1540034369, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf3, 0x83, 0x9c, 0x40, 0xb1, 0xb8, 0xfe, 0xce, 0xab, 0xe7, 0xbc, 0x83, 0xf6, 0xa9, 0x87, 0x99, 0x33, 0x47, 0x5d, 0xc6, 0x2c, 0xd7, 0xc9, 0x1c, 0xf4, 0x54, 0x34, 0xec, 0x6d, 0x67, 0x77, 0xa7}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/cmdusages.tmpl": templatesCmdusagesTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"cmdusages.tmpl": &bintree{templatesCmdusagesTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
