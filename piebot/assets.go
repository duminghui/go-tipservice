// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/cmdmsgs.tmpl (5.322kB)
// templates/cmdusages.tmpl (4.11kB)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesCmdmsgsTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x58\xdb\x6e\xe3\xbc\x11\xbe\xd7\x53\x4c\xb3\x17\x6e\x8d\xc4\x0f\x60\x2c\x16\x70\x0e\x45\x53\xac\xd3\x60\x93\xb4\xd8\xab\x35\x2d\x8d\x6d\x76\x29\x52\x25\xa9\x38\x86\xc0\x3e\xfb\x8f\x21\x29\x59\x8e\x2d\x59\xf9\x77\xb1\x37\x6b\x6a\x66\xbe\x99\x6f\x0e\x1c\xa6\xaa\x32\x5c\x71\x89\x70\xb1\x65\x42\xa0\x9d\x33\x2e\x2d\x4a\x26\x53\xbc\x80\x2b\xe7\x92\xaa\x9a\x38\x07\xff\xf1\x1f\x21\xdf\x7f\x4d\xaa\xea\x0a\x50\x66\xce\x25\x49\xcb\x08\xb7\x9b\x4c\xb3\xed\x9c\xcb\x59\xae\x4a\x69\xef\xb4\x6e\xec\xbc\x18\xd4\x73\x94\x96\x2b\xe9\x1c\xd4\xa2\x90\x73\xc9\xf3\x32\x07\xe6\x15\x80\x1b\x58\x54\xd5\x64\xce\x49\xa8\xaa\x26\x4f\xbb\x7c\xa9\x84\x73\x8b\x7e\xc4\x7f\x33\xc1\x33\x66\x71\x96\x65\xba\x1b\x94\x2c\x93\x84\x73\x0b\x02\x92\xca\xb6\x21\x46\x06\x58\x96\x69\x34\xa6\x1f\xeb\x5a\xd9\x0f\xc1\x70\x09\x4b\x65\x47\x06\x02\xc7\x97\xb0\x53\x25\xa4\x4c\x42\x69\xd0\xcb\x3e\x6a\x5c\xf1\x37\xe7\x0a\x8e\x0b\x48\x55\x9e\x33\x99\x81\x55\xb0\xe6\xaf\x08\x46\xe5\xa8\x24\xb6\x1d\xed\x77\x2f\x30\xff\xa0\xec\x9d\x54\xe5\x7a\xd3\xed\x26\xb9\x91\x29\x39\xb2\xb0\x61\xaf\x08\x28\x55\x69\x37\x75\x1e\xac\x6a\x52\xd4\x0f\xf7\x54\xa6\x29\x1a\xd3\x83\xd1\xa4\x9a\x68\xf1\xd6\x0f\x53\x4b\x58\x2d\xca\x12\xfb\xb6\x42\x9c\x92\xc4\xf3\xdb\xdf\x11\x0f\x85\x13\x7f\x7c\xf7\x56\xbc\x68\xe1\x9c\xff\x71\x7f\xeb\x5c\xf2\xa0\xb6\x04\xa6\x61\xc9\x04\x15\xe8\xf4\xb4\xd7\x4b\x26\x82\x0b\xed\xf2\xfe\x7e\x5e\x2f\xc3\x42\x19\x6e\xef\xe5\x4a\x75\x44\xea\x8d\x1c\x56\x53\x54\xaa\xab\x0a\xb8\x99\x26\xed\x40\x4f\x22\x15\x1c\x83\x87\x73\x2e\xbb\x73\x37\x3f\xec\x9a\xd3\x2d\x03\x4c\x08\xb5\x45\x5f\x4b\x4b\x84\x8c\x1b\xab\xf9\xb2\xb4\x1d\xdd\x5b\x70\x6c\xaa\xe6\x5c\xfb\x9e\xa8\x9d\x75\xbb\x76\x5a\x58\x85\x40\x66\xd0\x17\x7b\x5d\xdb\xed\xa2\x8f\x24\x2d\x7c\xc1\xa3\x7d\x4f\x5a\x8f\xab\x8f\xa8\x0a\x81\x6d\x1f\x9d\x83\x07\x05\x85\x3f\x3f\x0a\x1a\x0a\x8e\x97\xf0\xac\x77\xc0\xd6\x8c\x4b\xd8\x6e\x50\xd6\xb2\x4c\x23\x28\x29\xb8\x1c\x40\xcd\x1d\x4b\x7b\x9a\x8a\xf8\x47\x99\x9d\xac\xf3\x38\x72\x22\x59\x07\x2c\x91\xdc\x37\x4c\x91\xbf\xa2\xbe\x89\xaa\xc1\xb7\x6e\x06\x08\xc7\xcb\xfe\x83\xb7\xea\xf9\xa8\x2a\x29\xee\xbe\xd6\xfb\x33\xc8\xed\x9e\x9f\x0a\x25\x04\x2f\x54\x31\x85\xff\xbf\xfb\x57\x55\x93\x1b\xc5\xe5\x03\xcb\xa9\x8b\x1f\x39\xbe\x97\x98\xa6\x4c\x66\x3b\xea\xb9\xe8\x1e\x91\x7b\xe4\x62\x55\x69\x26\xd7\x08\x8d\x9f\x26\x88\x50\xff\x7b\xf7\xaa\x8a\xaf\x60\xf2\xb4\x51\xdb\x99\x10\xa1\x2c\x9c\x83\xbf\x32\x21\x7a\xa2\xfb\x5b\x54\x3e\x1d\x65\xba\x61\x52\xa2\xf8\x57\x81\x9a\x59\xa5\x7b\xa6\x5c\x3c\xe2\x2b\xc0\xff\xc1\xa4\x56\x80\x0b\x96\x65\xb5\xf8\x05\x5c\x38\x37\xcb\x32\xcc\xc0\x04\x43\xab\x52\x88\x5d\x40\x16\x06\xdb\x62\xdf\x30\x57\x34\xf6\x8f\xe4\xbc\x87\x8b\x76\x7f\x8f\x4c\xdd\x51\x54\x58\x5b\x60\xa9\xa5\x1b\x83\x4b\xb0\x1b\xa4\x76\x0b\x31\x98\x30\xd3\x22\x87\x37\xf1\x10\x9c\x83\xcf\x9f\x3c\x8b\x5f\xaa\x8a\xbc\x70\x8e\x06\x46\xa3\xd5\x4b\x4f\xc1\x91\x76\x85\x39\x93\x6c\x8d\xfa\x2b\x37\xb1\x00\xc7\xe3\x71\x3c\x9b\x8e\xc7\xe3\x04\x60\x3c\x26\xaa\xa6\xfe\xff\x00\x57\x50\x55\xff\x55\x5c\xc2\x24\x4a\x19\xb8\xb8\xa4\xa8\xbd\xe4\x37\x25\xb0\x53\x92\x3e\x36\xd2\x03\x7c\xea\x19\xd5\xc4\x95\x41\xfd\x8a\x1a\xf2\xe8\x6c\x52\x55\x16\xf3\x42\x30\xdb\x11\xdc\xe4\x0c\x6a\x0f\xdc\x53\x80\xba\x51\x72\xc5\xd7\x87\xb9\x50\x5c\x86\x63\x13\xb8\x6b\x65\xb7\xa6\x2f\xcc\xc9\xe9\x78\x0c\xad\xa1\xe9\xbf\xcc\x42\xba\x9b\x2c\x7b\x11\x6a\x84\x3a\xc5\xd4\x18\x81\xc3\x26\xe9\xbe\xc4\xea\x74\xcf\xf6\xd9\x3e\x4e\xf6\x30\x42\x8e\x64\xee\xde\x52\x51\x66\x38\x8c\xb4\x10\x4e\xf7\x30\x2d\xfc\x77\x7f\x5d\x5c\x2b\x5b\x07\xef\x97\x2a\x8d\x3e\x83\x19\xac\x94\xa6\x72\xa7\x15\x6b\x00\x56\x60\x97\x66\xf9\x1b\x37\x3d\xf7\x5b\xeb\x6e\xb3\x1b\x4e\x7d\xc6\xe5\xc8\x80\xf1\xea\xb0\x38\xbf\x98\x1e\x46\xd8\x0f\x56\x5f\x8b\xad\x70\xf7\xb1\xa6\xbe\x3e\x4a\xcd\xfc\xac\xb1\xca\x07\x7b\xe0\x00\xac\x18\x17\x98\xfd\x25\x39\x54\xdc\x30\x03\x4b\x44\xd9\x58\x88\x64\x7d\xd4\xf9\xfe\x05\xef\x57\x7d\xef\x98\x73\xc7\xce\x50\x45\xf5\x34\x59\x13\x24\x5b\x0a\x3c\x4c\xd7\x34\xb9\xda\x4f\x93\x80\x3c\x68\x90\x1c\x94\x72\x1c\x6e\xf1\x0c\xfc\x34\x8a\x23\x6e\x6f\x3c\x7e\x1d\x3c\xaa\xa2\xfc\xb0\x51\x85\x11\x5a\x7b\xe8\x5f\xea\xbd\x59\x69\xd5\x23\xd3\x2c\x37\x5f\x71\xbf\x64\xde\x1e\xed\x73\x4d\x72\xbd\xec\x7b\x48\xb2\xf2\x62\xd8\x1a\xcf\x83\xc5\xf9\xd3\x40\xfd\xb3\x34\x16\x24\x62\x46\x5b\xd7\x0e\xe8\x7d\xf3\xf9\x53\x1c\x45\x5f\x4e\xe1\x78\x6f\xa3\x95\x81\x98\x94\x85\x06\x70\x4e\x80\x3e\x34\x8f\x45\x1c\x76\xe3\x90\xe6\x40\x90\x27\xcb\x6c\x69\x1a\x98\xf0\x13\x72\x42\x5b\x22\x8c\xc2\x4e\x39\x02\xa5\x61\xc4\x84\x18\x75\x42\x06\xc5\x81\xa0\xf7\xd2\xa2\x7e\x65\xa2\x35\x51\x4e\x5b\xad\x05\x07\xda\x3d\xb7\xf4\x7f\x0e\xfb\xfd\x97\x26\x3e\x06\xb2\xcc\x97\xa8\x3b\x1d\x08\x16\x3f\x04\xdf\xf7\xec\xf9\x9d\x38\xbf\xe1\x81\xcc\xb2\x8c\x96\x5a\xb2\x09\x96\x99\x9f\xc9\x03\x55\xb4\x9f\x6f\x65\x7e\x6a\xdd\x5e\x5c\xfa\x85\x9c\xac\x75\xbc\x33\xeb\x7e\xd9\xa5\x02\x9f\x79\x8e\x67\x53\xdc\x48\x0e\x2d\x9e\xbb\x37\x8b\x32\x1b\x64\x7b\xb6\xb2\xa8\x49\x72\xa8\xe9\xda\x60\x4d\x0a\x11\x14\x2e\xa7\xb6\xde\x89\x2e\x7a\x77\xc5\xc4\x87\xcb\x7b\x7e\x0f\x2e\x8b\x7e\x02\xa3\xc5\xdb\xf9\x87\x6c\x26\xa9\xe0\xe9\x4f\xd0\x48\x9b\xb4\x92\x30\x65\x5a\xab\xad\xf9\x91\x52\x2a\x51\xa7\x42\xa5\x3f\xb7\xdc\xe0\x94\xb2\xaf\x71\xa5\xd1\x6c\xc2\x7e\xe0\x4d\x71\xb9\x52\x47\x26\x8c\x55\xc5\x8f\x65\x69\xad\x92\x5e\x8d\x7e\x03\x0d\x55\x1d\x16\x7d\xaf\xfe\x4c\xd5\xd3\x17\x0f\x09\x3c\xc4\xca\x0d\x2f\x84\xfd\xa5\xf1\xfd\xcc\x5b\x5c\x97\x12\x7c\xbc\xf4\x00\x23\x47\x69\xeb\xf7\x49\xe6\x78\x7f\xeb\xdc\x65\x2b\x84\xe0\x54\x06\xcb\x1d\x5c\x2b\x9b\x5c\xd7\x7f\x14\x09\xc8\xd3\xae\x77\x64\xf2\x22\xfd\x05\xac\x73\xcc\xa0\x25\xdb\x3a\x3e\xa9\xd6\x3b\xe5\x4c\x08\x34\xbe\xa2\x9e\xf7\x34\x9b\xda\xcd\x96\xfe\x1f\x01\x00\x00\xff\xff\x9c\x2e\x3e\xe5\xca\x14\x00\x00")

func templatesCmdmsgsTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesCmdmsgsTmpl,
		"templates/cmdmsgs.tmpl",
	)
}

func templatesCmdmsgsTmpl() (*asset, error) {
	bytes, err := templatesCmdmsgsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/cmdmsgs.tmpl", size: 5322, mode: os.FileMode(420), modTime: time.Unix(1539558936, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x4e, 0x65, 0xaf, 0x65, 0x2e, 0xfb, 0xe7, 0x21, 0x9c, 0xdf, 0x75, 0xbd, 0x55, 0x36, 0x44, 0x57, 0xf7, 0x4e, 0x80, 0xa, 0x77, 0x11, 0x9, 0xd, 0xdb, 0xd9, 0xbe, 0x8, 0x18, 0x52, 0x72, 0x54}}
	return a, nil
}

var _templatesCmdusagesTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x57\xdf\x6f\xdb\x36\x10\x7e\xf7\x5f\x71\xf0\x50\x64\x13\x1c\x21\x45\x5f\x06\xc3\x35\x92\x16\x1d\x12\x60\xde\x82\xa5\x41\x9b\x76\x03\x44\x4b\x27\x9b\x18\x7f\x68\x24\x95\x1f\x50\xf4\xbf\x0f\x47\x49\xb6\x25\x59\x76\x1e\xd2\x37\x99\x3c\xde\x7d\xbc\xfb\xee\xe3\xb9\x28\x12\x4c\xb9\x42\x18\x4b\xc6\xd5\xb8\x2c\x8b\x02\x55\x52\x96\xa3\xd1\x76\x27\xb7\x6c\x85\x63\x38\x2d\xcb\x51\x51\x84\xb7\x16\xcd\x02\x95\xe3\x5a\x95\x25\x14\x45\xf8\x51\x26\x7f\x30\x89\x65\x09\xb1\x96\x92\xa9\x04\xfc\x81\x69\x51\x8c\xff\x26\x8f\xa3\xa2\x38\x85\x9e\xd3\x8c\xe3\xed\xae\x5f\x9e\x42\x78\x65\x6f\xd6\xfa\xc1\x2f\x5f\x72\xe5\x08\x8c\x43\x99\x09\xe6\xb6\x28\x42\xa8\x31\xfa\x73\x41\x10\x14\x45\x78\x6d\x30\xe5\x8f\x65\x99\x71\x84\xef\xe7\x06\x63\xe4\xf7\x68\xc2\x30\xfc\x07\x66\x4c\xea\x5c\xb9\x79\x10\x04\x23\x00\xc9\x15\x97\xb9\x84\x6a\x71\x4a\x47\x39\x2e\x78\x7d\x91\x9b\x27\xb9\xd4\x62\x08\xf0\x92\x89\x1d\xc0\xed\xc0\x4b\x26\xaa\x00\x2b\x74\xb0\x64\x82\xa9\x18\xeb\x20\xfb\x9d\x25\x98\x69\xcb\xdd\xa0\xc3\x7a\x7f\xeb\xb4\x5e\x00\x96\x24\x06\xad\xdd\xef\xf5\x81\xbb\x75\x62\xd8\xc3\xab\x27\xb6\x71\x0c\xb3\x3a\xfe\xfc\x68\x62\xbf\xd4\x47\xfa\xd9\x05\x70\x8f\x29\x12\x3f\x32\xc3\x95\x4b\x61\xfc\x66\xf5\xe6\xcd\x18\xc2\xcf\x8f\xbf\x21\x5e\xa3\x89\x91\x20\x82\x4e\x37\x41\x40\x9b\x4d\x88\xa2\xa8\x0c\x5f\x58\xb6\x78\xcd\x94\x42\xf1\xea\x29\xa9\xfd\xfa\x8c\x3c\x1b\x94\xfa\x1e\xe7\x30\xfb\xa9\x5e\x0e\xc3\xb0\xce\x0c\x4b\x12\x42\x5f\x59\x00\x8b\x1d\xbf\x47\x68\x0e\xa7\xda\x40\xb4\x73\x85\xe8\xc4\x36\x4d\x34\x50\xe2\x35\x8a\xec\xf6\x40\x3f\x3e\xe9\x1c\x62\xa6\x20\xb7\x08\x6e\x8d\x16\x37\xfe\xfa\xc1\x46\xbb\x57\xde\xf6\x63\xe8\xfd\x6e\x77\xb6\xc4\xef\xee\xb4\x59\xdc\xdd\xed\xb0\x91\x92\xe9\xef\x54\x65\x7f\xc1\x14\x5b\xa1\xa1\x04\x57\x32\xb1\x7b\xb4\x5d\xb4\x70\xab\x4a\x2f\x3c\x9f\x71\xbc\xc8\x9d\xde\x7f\x7e\x9f\x14\x2d\x18\x57\xb5\xc7\x57\x61\x4a\x51\x84\x1f\xb4\xdb\xd5\x25\x59\x79\xef\xf0\xe5\x3c\xb7\x68\x9e\xcf\x8d\x16\x38\xdf\x43\x97\xe6\x10\x95\xee\x9a\xe3\x07\x3d\x20\x27\xf5\x0d\xaa\x78\x3f\xe8\x02\x99\xff\x86\x99\xf5\xf4\x99\xc3\xac\x5a\xa8\x60\xc7\x5a\xa5\x7c\xb5\xd9\x3c\xd9\x3c\x05\x95\xd1\x08\x5a\xc4\x8c\xfa\xde\x05\xb7\x2e\x02\xa7\xbd\xd8\x55\xde\x72\xc3\x96\x02\xa1\x72\x39\xd0\x0e\xf5\xc5\xaf\x54\xaa\x5b\x5a\xda\x0f\xc0\x55\xaa\x3d\x54\xbb\xd6\x0f\x60\xd1\xdc\xa3\x69\x60\xd3\xde\x41\xff\xbf\x73\xeb\x8e\xf8\xa7\x0b\x78\xff\xf4\x01\x4c\x88\xf6\x2d\x62\xcd\xd5\x89\xa5\xcb\x1c\xbb\xcb\xa7\xc7\x58\xe4\xc9\xeb\x3c\x8e\x7d\x98\x58\x79\x6f\xd3\xf0\xbb\x27\x20\xbd\x97\x7b\x38\xb8\x7b\x8a\xcc\x0e\xa3\xbf\x3c\xa2\x4f\x77\x83\xfa\x34\xed\xca\x51\xa7\xb0\x5d\x79\xe9\x97\x66\xc0\xa2\xd5\x15\x03\x36\xed\xde\x1f\x30\x6a\x57\x26\x3c\x20\x27\x24\x3e\xd7\xcc\x30\x79\xe3\x98\xcb\x6d\x8b\x3a\xa7\x16\x66\x5a\x09\xae\xf0\x99\x09\x31\x9f\x06\x01\xfc\xa9\xc4\x13\xf5\x37\xf1\xbf\xda\x82\x0c\x75\x26\xd0\x52\x1d\x88\x4b\xcd\xcf\x48\x67\x94\xc8\x69\x82\x29\xcb\x85\xab\xad\xa3\xe3\x40\xae\x94\x43\x73\xdf\x19\x61\x4e\x39\xcc\x78\xbd\xe1\x81\xcc\xbe\xae\xef\xe4\x37\x3b\xff\xf9\x2b\xac\x75\x6e\xe0\x8e\x5e\xdd\xdc\x21\x7c\x03\x8b\xb1\x56\x09\xfc\x02\xd4\x3e\x42\xab\x15\x38\x2e\x3d\x62\x02\xae\x55\x8c\x13\x88\x64\x6e\x1d\xcc\xe1\xed\xaf\x67\x76\xd2\x41\x4a\x6b\xd1\x08\x00\xe0\xd3\x23\x93\x99\xc0\x29\x44\x6f\xd7\x11\x70\x0b\x5a\xa1\x0f\x37\xa1\x95\x77\x67\xb2\x5e\xac\x20\x90\x88\xbc\x3b\xab\x71\x0c\x73\x6f\x73\xd1\x0b\x3f\x31\xb4\xaf\xc9\xaa\x41\x82\x86\x95\x29\x44\x0b\x02\xb9\x44\x60\xa0\x72\xb9\x44\x03\xf3\xf7\x30\x30\x09\x46\x00\x41\x10\x44\x06\xff\xcb\x0d\xc7\x24\xa2\x27\xfd\x28\x82\x8f\x4f\xb1\xc0\xcf\x5c\x62\xa7\xee\x31\xcc\xe2\xcd\x96\x4f\xf7\xa5\x7e\x20\x89\x7f\xf2\xa9\xb4\x94\x4b\x72\x42\x09\x6d\x72\xd9\x82\x09\x67\x13\xe8\x66\xf5\xec\x05\xb5\xbf\x48\x1d\x1a\x8a\xda\xc6\x43\x22\x40\x3b\x14\x7c\x03\xa7\x55\xd9\x06\x0d\x78\x3b\x88\x0d\x52\x3b\x38\x66\xff\x9d\x80\x65\x12\x81\xd9\x2d\x81\xbc\x1b\x58\xe6\xae\xa1\xc1\x7b\xaa\x5b\x45\x1b\xdb\x03\xfe\x8e\xd8\x70\x3c\x95\xbd\xe1\x2d\x08\x36\x33\x96\xc7\xfc\x65\xcd\xe3\x75\x33\x4f\x9d\xd8\xba\x51\xbc\xc4\xd0\x4b\x92\xf9\x54\x76\x62\xc7\xb9\x31\xa8\x5c\x73\x2a\xf2\x35\xbe\x4a\x21\xe5\x42\x00\x77\xb0\xc9\xbc\x23\x89\x22\x84\x34\x8b\xd2\x67\xf3\xaa\xf9\xa6\x7b\x11\x19\xfe\xd2\xa2\x9d\xf6\x59\xf5\xd8\x57\xd8\x35\x31\x9d\x1c\xd7\xab\xbb\xb8\x3d\xaa\x0e\x72\x92\x02\x32\x9c\xc0\xe2\x75\x30\xfe\x88\xbf\x60\x9e\x35\x1d\x95\x83\x96\xd4\x40\xd3\x91\x34\xda\x77\xfa\x02\xda\xbc\xdc\x8e\xd4\xf3\x26\x49\xd5\x5c\x7d\x41\x8f\x94\x42\x60\x14\x8d\xd2\x45\xb4\x1c\x01\xec\x19\x03\xfb\x4a\x1c\xfa\xbf\x21\x43\xa6\x1d\xad\x3c\x6c\xdc\xd2\x9b\xc3\xa6\x3d\x61\x38\xe2\xb9\xd3\xb6\x47\x9c\x77\x47\xe6\x03\xb6\x3b\xa4\x6c\xbf\x62\xff\x07\x00\x00\xff\xff\x87\xd7\x25\xcf\x0e\x10\x00\x00")

func templatesCmdusagesTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesCmdusagesTmpl,
		"templates/cmdusages.tmpl",
	)
}

func templatesCmdusagesTmpl() (*asset, error) {
	bytes, err := templatesCmdusagesTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/cmdusages.tmpl", size: 4110, mode: os.FileMode(420), modTime: time.Unix(1539529685, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x2a, 0x8a, 0xf5, 0x54, 0x96, 0x95, 0x3b, 0x8d, 0x2f, 0x1d, 0xd8, 0xdc, 0xe1, 0xd6, 0x9c, 0xcd, 0x9c, 0xa8, 0x5e, 0x20, 0xdb, 0x9c, 0x87, 0xef, 0x12, 0x12, 0x46, 0x67, 0xda, 0x70, 0x23, 0xa6}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/cmdmsgs.tmpl": templatesCmdmsgsTmpl,

	"templates/cmdusages.tmpl": templatesCmdusagesTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"cmdmsgs.tmpl":   &bintree{templatesCmdmsgsTmpl, map[string]*bintree{}},
		"cmdusages.tmpl": &bintree{templatesCmdusagesTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
