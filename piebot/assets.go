// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/cmdmsgs.tmpl (3.376kB)
// templates/cmdusages.tmpl (2.032kB)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesCmdmsgsTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\x4d\x6f\xe3\x36\x10\xbd\xeb\x57\x4c\xdd\x43\x00\x63\xe3\x1f\x20\x14\x2d\xb2\x69\x0a\x2c\x50\xa7\x8b\x64\xd3\xa2\x37\xd1\xe2\xd8\x9e\x82\x22\x55\x92\xca\x07\x08\xf6\xb7\x17\x24\x25\x85\x4a\x2c\x25\xbb\x8b\x5c\x1c\x6a\xc8\x79\xf3\xde\xcc\x23\x9d\xe3\xb8\x27\x89\xb0\x7a\x60\x42\xa0\xdd\x32\x92\x16\x25\x93\x35\xae\xe0\xdc\xfb\xc2\xb9\x8d\xf7\xf0\x57\xfc\x08\xcd\xf3\xd7\xc2\xb9\x73\x40\xc9\xbd\x2f\x8a\xec\x10\xb2\x47\xae\xd9\xc3\x96\xe4\x45\xa3\x3a\x69\xaf\xb4\x1e\xcf\xb9\x33\xa8\xb7\x28\x2d\x29\xe9\x3d\x0c\xa1\xd0\x90\xa4\xa6\x6b\x80\xc5\x0d\x40\x06\x2a\xe7\x36\x5b\x0a\x41\xce\x6d\x6e\x9f\x9a\x9d\x12\xde\x57\xcb\x19\xff\x64\x82\x38\xb3\x78\xc1\xb9\x9e\x4f\x1a\x4e\x0e\x11\xde\x57\x21\x91\x54\x36\x4f\x71\x66\x80\x71\xae\xd1\x98\xe5\x5c\x1f\x95\xfd\xaa\x34\x24\x61\xa7\xec\x99\x81\xc4\xf1\x07\x78\x52\x1d\xd4\x4c\x42\x67\x30\xc6\x7e\xd6\xb8\xa7\x47\xef\x5b\xc2\x0a\x6a\xd5\x34\x4c\x72\xb0\x0a\x0e\x74\x8f\x60\x54\x83\x4a\x62\x0e\x74\x19\x5e\x62\xfe\x5a\xd9\x2b\xa9\xba\xc3\x71\x1e\x66\x80\xc1\x95\x3c\xb3\x70\x64\xf7\x08\x28\x55\x67\x8f\x83\x0e\x56\x8d\x12\x15\x55\x55\x7d\x64\x22\xc8\xde\x7f\x2d\x43\x81\xf1\xd7\x54\xa4\xe2\x4e\xd6\x4a\xee\x49\x37\xc8\xb3\xd0\x6c\xf5\xd4\xae\xaa\x7a\x43\xdc\xdb\xae\xae\xd1\x98\x85\x32\xc6\x6e\x9a\x01\x16\xca\xc9\x54\x29\xec\xe3\x1e\xb1\x0c\x11\x5f\x1e\x7f\x43\x7c\x51\x45\x5c\xbe\x7a\x6c\xef\xb4\xf0\x3e\xfe\xf3\xe9\xd7\x39\xd6\x77\x4c\xa4\x84\x33\xe8\xfe\x56\x9d\x86\x5d\x62\xaf\x0c\x4c\x5e\x0e\x54\x94\x73\x60\x73\x16\x63\xd0\xb7\xf2\xc7\xb1\x55\x86\xec\x27\xb9\x57\x4b\xe8\xa6\x23\xd0\x6f\x1a\x46\x01\xc8\x94\x45\x4e\xdd\xc9\x4c\x2d\x61\x42\xb6\x25\x39\xdf\x70\xdb\xe9\xa8\x9f\x9e\x73\x60\x42\xa8\x07\x8c\x03\xb0\x43\xe0\x64\xac\xa6\x5d\x67\x67\x2c\xa7\x25\x1c\x5b\xfd\x2d\xcf\x39\xd1\xf0\x87\xbc\xe1\xb3\x5c\xad\x40\x66\x30\x4e\xe8\x30\x90\xf9\xa4\xf6\x24\x55\x71\x4a\xd1\xbe\x24\xed\xc4\xc4\xbc\x47\xec\x3c\xf6\x5b\x35\x8f\x7c\x7c\x46\xd5\x0a\xcc\x89\xf0\x1e\xae\x15\xb4\x71\xfd\x15\xb3\xd0\x12\x7e\x80\x2f\xfa\x09\xd8\x81\x91\x84\x87\x23\xca\x21\x96\x69\x04\x25\x05\xc9\x77\xf0\x7f\xc5\xea\x05\xbb\x09\xe8\x51\x9e\xac\x66\x30\xe3\x5e\x91\x89\x14\x21\xee\x06\x6b\xa4\x7b\xd4\x97\xfd\xd6\x84\x6d\xc6\xa6\x5b\xc2\x89\x61\x94\x42\x09\x41\xad\x6a\x4b\xf8\xef\xc5\x9f\x73\x9b\x4b\x45\xf2\x9a\x35\xc1\x02\x5a\xc2\x97\x11\x65\xcd\x24\x7f\x2a\x8b\x51\xbc\x50\xe2\x2b\x6b\x71\x4e\x33\x79\x40\x18\x71\x9a\x14\x12\xcc\x23\xc1\x3b\x09\xb4\x3e\x32\x29\x51\xfc\xd1\xa2\x66\x56\xe9\x05\x97\xeb\x97\x68\x0f\xf8\x2f\x6c\x86\x0d\xb0\x62\x9c\x0f\xe1\x2b\x58\x79\x7f\xc1\x39\x72\x30\xe9\xa0\x7d\x27\xc4\x53\xca\x2c\x0c\xe6\x61\x37\xd8\xa8\x70\xb3\xbc\x8a\x8b\x08\xab\xbc\xcd\xce\xcc\xd0\xff\x41\xa1\x07\x60\xb5\x0d\x97\x12\x49\xb0\x47\x0c\xc3\x91\x6a\x30\x65\x3c\xa0\xa7\xe1\xb2\x5f\x04\xef\xe1\xa7\x1f\x23\x11\x3f\x3b\x17\x50\x78\x1f\xc6\x7b\xdc\xb5\x48\x4f\x4b\x18\x9e\x23\x5b\x26\xd9\x01\xf5\xef\x64\x7a\x8b\x5d\xaf\xd7\xfd\x5a\xb9\x5e\xaf\x0b\x80\xf5\x3a\x50\x55\xc6\xdf\x00\xe7\xe0\xdc\x3f\x8a\x24\x6c\xfa\x28\x03\xab\x0f\xa1\xea\x18\x79\xa3\x04\xce\x46\x86\x8f\x63\xf4\x3b\x30\x2d\x18\x6b\xe0\xca\xa0\xbe\x47\x0d\x4d\x0f\xb6\x70\xce\x62\xd3\x0a\x66\x67\x8a\xdb\xbc\x91\x75\x21\xdd\x6d\x4a\x15\xef\x96\xc3\x54\x0b\x45\x32\x2d\x9b\xc4\x5d\xa6\xee\x40\x5f\x72\xb5\x72\xbd\x86\xcc\xe2\xe2\x97\x8b\x24\xf7\xa8\x72\x0c\xa1\xfd\xb3\xc4\xa1\xc5\x13\x87\xa3\xe8\xb1\xc5\x06\xb9\x2f\x9e\xd5\x7e\x2d\xf6\xf7\x12\x92\xa0\xbe\xb0\xb9\x36\x2e\x42\xf5\x4b\x7c\x7b\x69\x8c\x2a\x70\xd8\x2b\x1d\x5a\x36\xbc\xc4\xde\x71\x66\x62\x28\x18\xdb\x23\x99\x85\x1b\x25\xbb\x4d\xec\x91\xc2\xac\x90\x3c\x33\x60\xe2\x76\xa8\xde\x7e\xbf\x4e\x2b\x59\x4e\x36\x5c\x44\x43\x85\x99\x58\xe1\xd9\x18\x34\xee\x34\x8b\x7e\x61\x55\x2c\x76\x02\x00\xf6\x8c\x04\xf2\x1f\x8a\xe9\xc6\x23\x33\xb0\x43\x94\xe3\x09\x3d\x59\x5f\x0b\x7e\xf9\x91\xf6\xbd\xd8\x67\xbc\xea\x35\x98\xd0\x39\x0b\x83\x32\x16\xc9\x76\x02\xa7\x72\x95\xc5\xf9\xb3\x23\xa4\xcc\x99\x19\xa4\x7c\xff\x07\x00\x00\xff\xff\x30\xde\xdf\xb9\x30\x0d\x00\x00")

func templatesCmdmsgsTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesCmdmsgsTmpl,
		"templates/cmdmsgs.tmpl",
	)
}

func templatesCmdmsgsTmpl() (*asset, error) {
	bytes, err := templatesCmdmsgsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/cmdmsgs.tmpl", size: 3376, mode: os.FileMode(420), modTime: time.Unix(1539058382, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6, 0xe7, 0x5b, 0xec, 0xf, 0xde, 0x59, 0xdc, 0x16, 0x30, 0xcb, 0xd6, 0x84, 0xfc, 0xde, 0xdc, 0xaf, 0x3a, 0x5b, 0x76, 0x67, 0xb4, 0xac, 0x39, 0xc4, 0xf2, 0x33, 0x31, 0xaf, 0xa6, 0x63, 0x38}}
	return a, nil
}

var _templatesCmdusagesTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x94\x6d\x6b\xdb\x30\x10\xc7\xdf\xe7\x53\x1c\x19\xa5\x10\xa8\x3e\x40\x09\x59\xd9\x60\xb4\xb0\x8c\x42\x57\xc6\xd8\x06\x51\xec\x73\x72\x60\x4b\x46\x92\x93\x16\x55\xdf\x7d\xe8\xc1\x89\xed\x38\xdd\x5e\xe4\x9d\xf1\xe9\x7e\xf7\xbf\x47\x6b\x73\x2c\x48\x20\x4c\x2b\x4e\x62\xea\x9c\xb5\x28\x72\xe7\x26\x47\x43\xa3\xf9\x06\xa7\x70\x13\x7e\xb2\x67\x8d\x6a\x89\xc2\x90\x14\xce\x81\xb5\xec\x73\x95\x7f\xe3\x15\x3a\x07\x99\xac\x2a\x2e\x72\x08\x0e\xb7\xd6\x4e\x7f\x7b\xe0\xc4\xda\x1b\x88\xcc\x0e\xb4\x26\x7c\xee\x72\xa9\x00\xf6\xa0\x9f\xb6\x72\x1f\x7e\xdf\x93\x30\x5e\x8b\xc1\xaa\x2e\xb9\x39\xaa\x60\x90\x24\x06\xbf\xd9\x6c\x66\x2d\x7b\x54\x58\xd0\x8b\x73\x35\x21\xfc\xba\x53\x98\x21\xed\x50\x31\xc6\xfe\xc0\x9c\x57\xb2\x11\x66\x31\x9b\xcd\x26\x00\xfe\x81\xb5\xec\xe9\xb5\x5a\xcb\xd2\x39\x30\x12\xda\xd7\x7a\x02\x50\x91\xa0\xaa\x11\x10\x7d\x6e\x3d\x99\x70\x49\x29\xcf\xd6\x6b\x3c\x9f\x35\x2f\x3b\xf9\xf4\x75\xad\x79\x19\xe3\x6f\xd0\xc0\x9a\x97\x5c\x64\x98\x82\x8c\xc3\x72\xac\xa5\x26\x73\x16\x98\xec\x47\x68\xfa\x01\x3c\xcf\x15\x6a\x3d\x4e\xdd\x93\xd9\xe6\x8a\xef\x2f\x5e\xf7\x16\x0c\xf3\x14\x7f\x31\xa8\xfb\x69\x61\x7f\x24\x97\xd3\xea\x02\x98\x97\x02\xfd\xf8\xd4\x8a\x84\x29\x60\x7a\xb5\xb9\xba\x9a\x02\xfb\xfe\xf2\x05\xf1\x11\x55\x86\x5e\x22\xc8\xe2\x10\x04\xa4\x3a\x84\xb0\x36\x3e\xfc\xcf\xb6\x65\x5b\x2e\x04\x96\x17\x2f\x49\xe2\x86\x8a\xbc\x29\xac\xe4\x0e\x17\x30\xff\x90\x7e\x33\xc6\x52\x65\x78\x9e\x7b\xf5\xf1\x05\xf0\xcc\xd0\x0e\xa1\x75\x2e\xa4\x82\x55\x27\x85\x15\xac\x74\xbb\x64\x67\x7a\xbc\xc5\xb2\x7e\x7e\x67\x5f\x5f\x65\x03\x19\x17\xd0\x68\x04\xb3\x45\x8d\x07\xde\x69\xb4\x49\x37\xe7\xe3\xbe\xb2\xc0\x3d\x5a\x8e\x93\x3f\xb4\xf4\xc7\x78\x68\x1d\x8c\xa3\xaf\x66\xc8\x29\x96\x7f\xc9\x05\xdf\xa0\xf2\x15\x8e\x67\xa4\xeb\xda\xef\x1a\xeb\x1e\xad\xf1\x53\xb3\xe4\x24\x12\xf1\x22\xad\xfe\xe8\x2f\x49\x15\x81\x83\x1e\xdf\x35\x1a\xd5\xdb\x9d\x92\x25\x2e\x46\x5a\xdc\x3a\xf9\x6a\x3f\x12\x7e\x92\x67\x4e\x40\x12\x1d\xe7\xe9\x72\x9a\xeb\xc0\x83\xb9\x0e\x4d\x5e\xc0\x3c\xfe\x88\x4a\x33\x29\x0a\xda\x1c\x8c\xd7\x87\x83\x1e\x1f\x4d\xa0\x37\x3e\xab\x00\x2c\x49\x9b\x95\x3f\xa4\xfe\x0c\x45\x40\xa3\xf8\xba\x44\x88\x94\x33\x73\x9a\xd2\x7b\x10\x85\xec\x5d\xb9\xc0\x24\x51\xc8\x20\x48\x6f\xe5\x1e\x34\xaa\x1d\xaa\x56\x9c\xb7\xbd\x8b\xfc\x4a\xda\x9c\x22\xbd\xcc\x80\xf4\x1f\xc0\xcb\xb2\xaf\x35\x93\x24\xae\xb5\x97\xfc\x2f\xc5\xf7\x27\x0b\xe6\x1c\xfc\x3c\xbb\x55\xb7\xc3\x25\xea\x67\x3d\x58\x89\x93\x14\xc6\xed\xdd\xa1\x18\x7f\xd1\x9b\xf5\xde\x5e\xfc\x0d\x00\x00\xff\xff\xcb\x1a\xe4\xbd\xf0\x07\x00\x00")

func templatesCmdusagesTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesCmdusagesTmpl,
		"templates/cmdusages.tmpl",
	)
}

func templatesCmdusagesTmpl() (*asset, error) {
	bytes, err := templatesCmdusagesTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/cmdusages.tmpl", size: 2032, mode: os.FileMode(420), modTime: time.Unix(1539058004, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xcc, 0x99, 0x33, 0xb5, 0x5b, 0xca, 0x6d, 0xde, 0xec, 0x95, 0xbe, 0x4d, 0x75, 0xc4, 0xbc, 0x9f, 0x60, 0x12, 0x89, 0x0, 0xc8, 0x8, 0x88, 0xfe, 0x14, 0xd1, 0xe8, 0xb2, 0xe9, 0x7b, 0x39, 0xa6}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/cmdmsgs.tmpl": templatesCmdmsgsTmpl,

	"templates/cmdusages.tmpl": templatesCmdusagesTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"cmdmsgs.tmpl":   &bintree{templatesCmdmsgsTmpl, map[string]*bintree{}},
		"cmdusages.tmpl": &bintree{templatesCmdusagesTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
